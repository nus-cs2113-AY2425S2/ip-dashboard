[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"juneja999"},"content":"# AJ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"juneja999"},"content":"AJ is a chatbot that can help you manage your tasks by listing them, ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"juneja999"},"content":"their deadlines, their completion status and even saving them to your ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"juneja999"},"content":"local files, all done through command line.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"juneja999"},"content":"A super efficient tool for a super efficient you!","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"juneja999"},"content":"----------------","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"juneja999"},"content":"## Table of Content","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"juneja999"},"content":"### 1. Setting up in Intellij","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"juneja999"},"content":"### 2. Commands:   ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"juneja999"},"content":"1. Listing all the tasks: `list`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"juneja999"},"content":"2. Adding a Todo: `todo`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"juneja999"},"content":"3. Adding a Deadline: `deadline`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"juneja999"},"content":"4. Adding an Event: `event`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"juneja999"},"content":"5. Deleting a task: `delete`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"juneja999"},"content":"6. Marking a task: `mark`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"juneja999"},"content":"7. Unmarking a task: `unmark`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"juneja999"},"content":"8. Exiting the program: `bye`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"juneja999"},"content":"8. Finding a task with keyword(s):`find`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"juneja999"},"content":"    ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"juneja999"},"content":"   **NOTE:** All of these commands are case-insensitive  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"juneja999"},"content":"### 3. Important Points  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"juneja999"},"content":"----","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"juneja999"},"content":"### Setting up in Intellij","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"-"},"content":"Prerequisites: JDK 17, update Intellij to the most recent version.","lastModifiedDate":"2024-07-11","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 17** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2024-07-11","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"juneja999"},"content":"1. After that, locate the `src/main/java/AJ.java` file, right-click it, and choose `Run AJ.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"juneja999"},"content":"   ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"juneja999"},"content":"***********************(^.^)***************************","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"juneja999"},"content":"Hi there! I\u0027m AJ, always happy to help :) ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"juneja999"},"content":"What\u0027s on your mind?","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"juneja999"},"content":"***********************(^.^)***************************","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"juneja999"},"content":"PS:In case I don\u0027t see you later, good afternoon, good evening, and good night","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"juneja999"},"content":"***********************(^.^)***************************","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-01-04","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"-"},"content":"**Warning:** Keep the `src\\main\\java` folder as the root folder for Java files (i.e., don\u0027t rename those folders or move Java files to another folder outside of this folder path), as this is the default location some tools (e.g., Gradle) expect to find Java files.","lastModifiedDate":"2025-01-04","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"juneja999"},"content":"-----","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"juneja999"},"content":"### Commands","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"juneja999"},"content":"1. Listing all tasks: `list`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"juneja999"},"content":"   Lists all the feature currently in the task list.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"juneja999"},"content":"   **Format:** `list`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"juneja999"},"content":"   **Example:**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"juneja999"},"content":"   1. `list` returns the following saved tasks","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"juneja999"},"content":"   ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"juneja999"},"content":"       1] [T] this will be difficult    ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"juneja999"},"content":"       2] [D] dinosaur is forever be (By:789)    ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"juneja999"},"content":"       3] [E] hahhah what are be (From:9 - To:10)    ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"juneja999"},"content":"       4] [T] jamer dinosaur be    {completed}","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"juneja999"},"content":"       5] [T] superman    {completed}","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"juneja999"},"content":"       6] [E] cycling (From:Aug 12 2009, 05:40 am - To:Feb 14 2025, 02:15 pm)","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"juneja999"},"content":"   ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"juneja999"},"content":"   **Note:**  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"juneja999"},"content":"   - The characters `T`/`D`/`E` represent the task type, which are, todo, deadline and event","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"juneja999"},"content":"   respectively.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"juneja999"},"content":"   - Depending upon the task type, they may or may not have a time dimension. More","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"juneja999"},"content":"   description can be found for the individual task type.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"juneja999"},"content":"   -  `{completed}` indicates that a task has been done  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"juneja999"},"content":"2. Adding a todo: `todo`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"juneja999"},"content":"   Add a task type of todo. This only takes in user task input in the ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"juneja999"},"content":"form of `UserTask` and no time attribute can be provided here.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"juneja999"},"content":"   **Format:** `todo UserTask`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"juneja999"},"content":"   **Example:**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"juneja999"},"content":"   1. `todo sing` will save a task type of todo with description \u0027sing\u0027.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"juneja999"},"content":"3. Adding a deadline: `deadline`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"juneja999"},"content":"Add a task type of deadline. This takes in user task input in the","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"juneja999"},"content":"form of `UserTask` and a by time attribute in the form of `By`.    ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"juneja999"},"content":"**Format:** `todo UserTask /by By`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"juneja999"},"content":"**Example:**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"juneja999"},"content":"   1. `deadline sing /by 6 pm ` will save a task type of deadline ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"juneja999"},"content":"   with description \u0027sing\u0027 and By of 6 pm.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"juneja999"},"content":"   **Warning:** AJ can interpret dates and time, but they need to be **strictly** in ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"juneja999"},"content":"            accordance to the format as described in Important Points, 1.   ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"juneja999"},"content":"            If the format is not followed, programme will store date and time ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"juneja999"},"content":"            as user had inputted.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"juneja999"},"content":"4. Adding an event: `event`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"juneja999"},"content":"Add a task type of event. This takes in user input in the form of `UserTask` and a ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"juneja999"},"content":"from time attribute in the form of `From` and a to time attribute in the form of `To`.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"juneja999"},"content":"**Format:** `event UserTask /from From /to To`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"juneja999"},"content":"**Example:**  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"juneja999"},"content":"   1. `event sing /from 10 am /to 11 am` will save an event sing from 10 am to 11 am  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"juneja999"},"content":"   **Warning 1:** AJ can interpret dates and time, but they need to be **strictly** in","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"juneja999"},"content":"         accordance to the format as described in Important Points, 1.   ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"juneja999"},"content":"         If the format is not followed, programme will store date and time","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"juneja999"},"content":"         as user had inputted.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"juneja999"},"content":"   **Warning 2:** **It is mandatory** to fill out the `From` and `To` fields. User ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"juneja999"},"content":"                     cannot leave them blank.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"juneja999"},"content":"5. Deleting a task: `delete`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"juneja999"},"content":"Deletes the task from list whose `index` is provided.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"juneja999"},"content":"**Format:** `delete index`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"juneja999"},"content":"**Example:** `delete 1` will delete the following task from the list","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"juneja999"},"content":"      ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"juneja999"},"content":"      [T] this will be difficult","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"juneja999"},"content":"      ````  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"juneja999"},"content":"   **Note:** `index` \u003e\u003d 1  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"juneja999"},"content":"6. Marking a task: `mark`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"juneja999"},"content":"It will mark the task as  `{completed}` when the `index` is provided.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"juneja999"},"content":"**Format:** `mark index`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"juneja999"},"content":"**Example:** `mark 1` will result in","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"juneja999"},"content":"   ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"juneja999"},"content":"    1] [T] this will be difficult    {completed}  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"juneja999"},"content":"   ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"juneja999"},"content":"   **Note:** `index` \u003e\u003d1  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"juneja999"},"content":"7. Unmarking a task: `Unmark`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"juneja999"},"content":"   It will unmark the task when the `index` is provided. If a task was previously","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"juneja999"},"content":"   unmarked, it will display nothing in the status field.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"juneja999"},"content":"   **Format:** `unmark index`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"juneja999"},"content":"   **Example:** `unmark 1` will result in","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"juneja999"},"content":"   ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"juneja999"},"content":"   1] [T] this will be difficult","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"juneja999"},"content":"   ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"juneja999"},"content":"   **Note:** `index` \u003e\u003d1  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"juneja999"},"content":"8. Exiting the programme : `Bye`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"juneja999"},"content":"      This will exit the programme.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"juneja999"},"content":"      **Format:** `bye`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"juneja999"},"content":"9. Finding tasks: `find`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"juneja999"},"content":"It will find tasks whose description matches the `TargetWord(s)` provided by the user.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"juneja999"},"content":"User also needs to specify if the search should be case-sensitive or case-insensitive.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"juneja999"},"content":"User **must write cs** to `CaseSensitivity` for case-sensitive search, ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"juneja999"},"content":"**otherwise must write ncs**.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"juneja999"},"content":"   **Format:** `find CaseSensitivity TargetWord(s)`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"juneja999"},"content":"   **Example:**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"juneja999"},"content":"   1. `find ncs dinosaur` will result in ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"juneja999"},"content":"         ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"juneja999"},"content":"         Here is what I found: ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"juneja999"},"content":"         1] [D] dinosaur is forever be (By:789)    ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"juneja999"},"content":"         2] [T] jamer dinosaur be    {completed}","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"juneja999"},"content":"         ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"juneja999"},"content":"   2. `find ncs DINOSAUR` will result in ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"juneja999"},"content":"      ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"juneja999"},"content":"      1] [D] dinosaur is forever be (By:789)    ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"juneja999"},"content":"      2] [T] jamer dinosaur be    {completed}","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"juneja999"},"content":"      ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"juneja999"},"content":"   3. `find cs DINOSAUR` will result in ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"juneja999"},"content":"      ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"juneja999"},"content":"      Nothing found :(","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"juneja999"},"content":"      ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"juneja999"},"content":"   4. `find ncs dinosaur superman` will result in ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"juneja999"},"content":"      ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"juneja999"},"content":"      Here is what I found: ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"juneja999"},"content":"      1] [D] dinosaur is forever be (By:789)    ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"juneja999"},"content":"      2] [T] jamer dinosaur be    {completed}","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"juneja999"},"content":"      3] [T] superman    {completed}","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"juneja999"},"content":"      ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"juneja999"},"content":"   **Warning:** The `CaseSensitivity` field in format ust be specified, otherwise ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"juneja999"},"content":"                  it will result in incorrect results.    ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"juneja999"},"content":"   ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"juneja999"},"content":"-----------","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"juneja999"},"content":"### Important Points ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"juneja999"},"content":"1. To make sure that the programme interprets Date and Time, you must **strictly**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"juneja999"},"content":"use the format **dd-MM-yyyy hh:mm** , where \"d\" represents day, \"M\" represents month,","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"juneja999"},"content":"\"y\" represents year, \"h\" represents hour and \"m\" represents minute.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"juneja999"},"content":"Also make sure that you use \"-\" only and not alternatives like \"/\".   ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"juneja999"},"content":"Please also note that **the system will not pad missing values with zero.**  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"juneja999"},"content":"**Example:** `event sing /from 10-12-2024 05:30 /to 11-12-2024 17:50` will result in","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"juneja999"},"content":"   ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"juneja999"},"content":"   Done!, added: [E] sing  (From:Dec 10 2024, 05:30 am - To:Dec 11 2024, 05:50 pm)","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"juneja999"},"content":"   ````  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"juneja999"},"content":"2. User must provide `From` and `To` fields for an `event`, otherwise there will be unexpected issues. ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"juneja999"},"content":"To rectify the error, user must then manually clear this `event` entry from the SavedTasks.txt file (file","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"juneja999"},"content":"where tasks are saved).  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"juneja999"},"content":"2. Make sure to indicate case-sensitivity via \"ncs\" or \"cs\" when using `find`.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"juneja999"},"content":"3. The `index` for `mark`, `unmark` and`delete` should be \u003e\u003d 1.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"juneja999"},"content":"4. In the case when task type(`todo`,`deadline`,`event`) is not mentioned, AJ will ask","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"juneja999"},"content":"if we would like to store it as a `todo`. Please follow instructions provided from there.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"juneja999"},"content":"----","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"juneja999"},"content":"## Hope you enjoy your experience with AJ :)","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"juneja999":207,"-":16}},{"path":"UserData/SavedTasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"juneja999"},"content":"1 ~ D ~ sing ~ Dec 16 1231, 12:55 pm ~ yet to be completed","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"juneja999"},"content":"2 ~ T ~ dance ~ yet to be completed","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"juneja999":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"juneja999"},"content":"# AJ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"juneja999"},"content":"AJ is a chatbot that can help you manage your tasks by listing them, ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"juneja999"},"content":"their deadlines, their completion status and even saving them to your ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"juneja999"},"content":"local files, all done through command line.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"juneja999"},"content":"A super efficient tool for a super efficient you!","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"juneja999"},"content":"----------------","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"juneja999"},"content":"## Table of Content","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"juneja999"},"content":"### 1. Setting up in Intellij","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"juneja999"},"content":"### 2. Commands:   ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"juneja999"},"content":"1. Listing all the tasks: `list`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"juneja999"},"content":"2. Adding a Todo: `todo`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"juneja999"},"content":"3. Adding a Deadline: `deadline`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"juneja999"},"content":"4. Adding an Event: `event`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"juneja999"},"content":"5. Deleting a task: `delete`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"juneja999"},"content":"6. Marking a task: `mark`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"juneja999"},"content":"7. Unmarking a task: `unmark`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"juneja999"},"content":"8. Exiting the program: `bye`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"juneja999"},"content":"8. Finding a task with keyword(s):`find`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"juneja999"},"content":"    ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"juneja999"},"content":"   **NOTE:** All of these commands are case-insensitive  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"juneja999"},"content":"### 3. Important Points  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"juneja999"},"content":"----","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"juneja999"},"content":"### Setting up in Intellij","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"juneja999"},"content":"Prerequisites: JDK 17, update Intellij to the most recent version.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"juneja999"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"juneja999"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"juneja999"},"content":"   1. Click `Open`.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"juneja999"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"juneja999"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"juneja999"},"content":"1. Configure the project to use **JDK 17** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"juneja999"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"juneja999"},"content":"1. After that, locate the `src/main/java/AJ.java` file, right-click it, and choose `Run AJ.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"juneja999"},"content":"***********************(^.^)***************************","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"juneja999"},"content":"Hi there! I\u0027m AJ, always happy to help :) ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"juneja999"},"content":"What\u0027s on your mind?","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"juneja999"},"content":"***********************(^.^)***************************","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"juneja999"},"content":"PS:In case I don\u0027t see you later, good afternoon, good evening, and good night","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"juneja999"},"content":"***********************(^.^)***************************","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"juneja999"},"content":"**Warning:** Keep the `src\\main\\java` folder as the root folder for Java files (i.e., don\u0027t rename those folders or move Java files to another folder outside of this folder path), as this is the default location some tools (e.g., Gradle) expect to find Java files.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"juneja999"},"content":"-----","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"juneja999"},"content":"### Commands","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"juneja999"},"content":"1. Listing all tasks: `list`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"juneja999"},"content":"   Lists all the feature currently in the task list.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"juneja999"},"content":"   **Format:** `list`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"juneja999"},"content":"   **Example:**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"juneja999"},"content":"   1. `list` returns the following saved tasks","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"juneja999"},"content":"   ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"juneja999"},"content":"       1] [T] this will be difficult    ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"juneja999"},"content":"       2] [D] dinosaur is forever be (By:789)    ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"juneja999"},"content":"       3] [E] hahhah what are be (From:9 - To:10)    ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"juneja999"},"content":"       4] [T] jamer dinosaur be    {completed}","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"juneja999"},"content":"       5] [T] superman    {completed}","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"juneja999"},"content":"       6] [E] cycling (From:Aug 12 2009, 05:40 am - To:Feb 14 2025, 02:15 pm)","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"juneja999"},"content":"   ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"juneja999"},"content":"   **Note:**  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"juneja999"},"content":"   - The characters `T`/`D`/`E` represent the task type, which are, todo, deadline and event","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"juneja999"},"content":"   respectively.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"juneja999"},"content":"   - Depending upon the task type, they may or may not have a time dimension. More","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"juneja999"},"content":"   description can be found for the individual task type.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"juneja999"},"content":"   -  `{completed}` indicates that a task has been done  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"juneja999"},"content":"2. Adding a todo: `todo`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"juneja999"},"content":"   Add a task type of todo. This only takes in user task input in the ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"juneja999"},"content":"form of `UserTask` and no time attribute can be provided here.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"juneja999"},"content":"   **Format:** `todo UserTask`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"juneja999"},"content":"   **Example:**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"juneja999"},"content":"   1. `todo sing` will save a task type of todo with description \u0027sing\u0027.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"juneja999"},"content":"3. Adding a deadline: `deadline`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"juneja999"},"content":"Add a task type of deadline. This takes in user task input in the","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"juneja999"},"content":"form of `UserTask` and a by time attribute in the form of `By`.    ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"juneja999"},"content":"**Format:** `todo UserTask /by By`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"juneja999"},"content":"**Example:**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"juneja999"},"content":"   1. `deadline sing /by 6 pm ` will save a task type of deadline ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"juneja999"},"content":"   with description \u0027sing\u0027 and By of 6 pm.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"juneja999"},"content":"   **Warning:** AJ can interpret dates and time, but they need to be **strictly** in ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"juneja999"},"content":"            accordance to the format as described in Important Points, 1.   ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"juneja999"},"content":"            If the format is not followed, programme will store date and time ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"juneja999"},"content":"            as user had inputted.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"juneja999"},"content":"4. Adding an event: `event`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"juneja999"},"content":"Add a task type of event. This takes in user input in the form of `UserTask` and a ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"juneja999"},"content":"from time attribute in the form of `From` and a to time attribute in the form of `To`.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"juneja999"},"content":"**Format:** `event UserTask /from From /to To`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"juneja999"},"content":"**Example:**  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"juneja999"},"content":"   1. `event sing /from 10 am /to 11 am` will save an event sing from 10 am to 11 am  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"juneja999"},"content":"   **Warning 1:** AJ can interpret dates and time, but they need to be **strictly** in","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"juneja999"},"content":"         accordance to the format as described in Important Points, 1.   ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"juneja999"},"content":"         If the format is not followed, programme will store date and time","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"juneja999"},"content":"         as user had inputted.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"juneja999"},"content":"   **Warning 2:** **It is mandatory** to fill out the `From` and `To` fields. User ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"juneja999"},"content":"                     cannot leave them blank.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"juneja999"},"content":"5. Deleting a task: `delete`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"juneja999"},"content":"Deletes the task from list whose `index` is provided.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"juneja999"},"content":"**Format:** `delete index`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"juneja999"},"content":"**Example:** `delete 1` will delete the following task from the list","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"juneja999"},"content":"      ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"juneja999"},"content":"      [T] this will be difficult","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"juneja999"},"content":"      ````  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"juneja999"},"content":"   **Note:** `index` \u003e\u003d 1  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"juneja999"},"content":"6. Marking a task: `mark`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"juneja999"},"content":"It will mark the task as  `{completed}` when the `index` is provided.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"juneja999"},"content":"**Format:** `mark index`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"juneja999"},"content":"**Example:** `mark 1` will result in","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"juneja999"},"content":"   ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"juneja999"},"content":"    1] [T] this will be difficult    {completed}  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"juneja999"},"content":"   ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"juneja999"},"content":"   **Note:** `index` \u003e\u003d1  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"juneja999"},"content":"7. Unmarking a task: `Unmark`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"juneja999"},"content":"   It will unmark the task when the `index` is provided. If a task was previously","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"juneja999"},"content":"   unmarked, it will display nothing in the status field.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"juneja999"},"content":"   **Format:** `unmark index`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"juneja999"},"content":"   **Example:** `unmark 1` will result in","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"juneja999"},"content":"   ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"juneja999"},"content":"   1] [T] this will be difficult","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"juneja999"},"content":"   ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"juneja999"},"content":"   **Note:** `index` \u003e\u003d1  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"juneja999"},"content":"8. Exiting the programme : `Bye`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"juneja999"},"content":"      This will exit the programme.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"juneja999"},"content":"      **Format:** `bye`","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"juneja999"},"content":"9. Finding tasks: `find`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"juneja999"},"content":"It will find tasks whose description matches the `TargetWord(s)` provided by the user.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"juneja999"},"content":"User also needs to specify if the search should be case-sensitive or case-insensitive.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"juneja999"},"content":"User **must write cs** to `CaseSensitivity` for case-sensitive search, ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"juneja999"},"content":"**otherwise must write ncs**.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"juneja999"},"content":"   **Format:** `find CaseSensitivity TargetWord(s)`  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"juneja999"},"content":"   **Example:**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"juneja999"},"content":"   1. `find ncs dinosaur` will result in ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"juneja999"},"content":"         ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"juneja999"},"content":"         Here is what I found: ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"juneja999"},"content":"         1] [D] dinosaur is forever be (By:789)    ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"juneja999"},"content":"         2] [T] jamer dinosaur be    {completed}","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"juneja999"},"content":"         ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":177,"author":{"gitId":"juneja999"},"content":"   2. `find ncs DINOSAUR` will result in ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":178,"author":{"gitId":"juneja999"},"content":"      ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":179,"author":{"gitId":"juneja999"},"content":"      1] [D] dinosaur is forever be (By:789)    ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":180,"author":{"gitId":"juneja999"},"content":"      2] [T] jamer dinosaur be    {completed}","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":181,"author":{"gitId":"juneja999"},"content":"      ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":182,"author":{"gitId":"juneja999"},"content":"   3. `find cs DINOSAUR` will result in ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":183,"author":{"gitId":"juneja999"},"content":"      ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":184,"author":{"gitId":"juneja999"},"content":"      Nothing found :(","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":185,"author":{"gitId":"juneja999"},"content":"      ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":186,"author":{"gitId":"juneja999"},"content":"   4. `find ncs dinosaur superman` will result in ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":187,"author":{"gitId":"juneja999"},"content":"      ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":188,"author":{"gitId":"juneja999"},"content":"      Here is what I found: ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":189,"author":{"gitId":"juneja999"},"content":"      1] [D] dinosaur is forever be (By:789)    ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":190,"author":{"gitId":"juneja999"},"content":"      2] [T] jamer dinosaur be    {completed}","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":191,"author":{"gitId":"juneja999"},"content":"      3] [T] superman    {completed}","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":192,"author":{"gitId":"juneja999"},"content":"      ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":193,"author":{"gitId":"juneja999"},"content":"   **Warning:** The `CaseSensitivity` field in format ust be specified, otherwise ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":194,"author":{"gitId":"juneja999"},"content":"                  it will result in incorrect results.    ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":195,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":196,"author":{"gitId":"juneja999"},"content":"   ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":197,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":199,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":200,"author":{"gitId":"juneja999"},"content":"-----------","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":202,"author":{"gitId":"juneja999"},"content":"### Important Points ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":203,"author":{"gitId":"juneja999"},"content":"1. To make sure that the programme interprets Date and Time, you must **strictly**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":204,"author":{"gitId":"juneja999"},"content":"use the format **dd-MM-yyyy hh:mm** , where \"d\" represents day, \"M\" represents month,","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":205,"author":{"gitId":"juneja999"},"content":"\"y\" represents year, \"h\" represents hour and \"m\" represents minute.  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":206,"author":{"gitId":"juneja999"},"content":"Also make sure that you use \"-\" only and not alternatives like \"/\".   ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":207,"author":{"gitId":"juneja999"},"content":"Please also note that **the system will not pad missing values with zero.**  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":208,"author":{"gitId":"juneja999"},"content":"**Example:** `event sing /from 10-12-2024 05:30 /to 11-12-2024 17:50` will result in","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":209,"author":{"gitId":"juneja999"},"content":"   ````","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":210,"author":{"gitId":"juneja999"},"content":"   Done!, added: [E] sing  (From:Dec 10 2024, 05:30 am - To:Dec 11 2024, 05:50 pm)","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":211,"author":{"gitId":"juneja999"},"content":"   ````  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":212,"author":{"gitId":"juneja999"},"content":"2. User must provide `From` and `To` fields for an `event`, otherwise there will be unexpected issues. ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":213,"author":{"gitId":"juneja999"},"content":"To rectify the error, user must then manually clear this `event` entry from the SavedTasks.txt file (file","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":214,"author":{"gitId":"juneja999"},"content":"where tasks are saved).  ","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":216,"author":{"gitId":"juneja999"},"content":"2. Make sure to indicate case-sensitivity via \"ncs\" or \"cs\" when using `find`.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":217,"author":{"gitId":"juneja999"},"content":"3. The `index` for `mark`, `unmark` and`delete` should be \u003e\u003d 1.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":218,"author":{"gitId":"juneja999"},"content":"4. In the case when task type(`todo`,`deadline`,`event`) is not mentioned, AJ will ask","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":219,"author":{"gitId":"juneja999"},"content":"if we would like to store it as a `todo`. Please follow instructions provided from there.","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":222,"author":{"gitId":"juneja999"},"content":"----","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":223,"author":{"gitId":"juneja999"},"content":"## Hope you enjoy your experience with AJ :)","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"juneja999":205,"-":18}},{"path":"src/main/java/AJ.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"juneja999"},"content":"/**","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"juneja999"},"content":" * this is the main function for AJ chatbot","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"juneja999"},"content":" * all main interactions are routed through this class","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"juneja999"},"content":" * we take user commands continuously","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"juneja999"},"content":" * for each command, we split it into a user command array and target the main word like \u0027list\u0027, \u0027bye\u0027, \u0027mark\u0027, \u0027event\u0027 etc","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"juneja999"},"content":" */","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"juneja999"},"content":"public class AJ {","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"juneja999"},"content":"    ","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"juneja999"},"content":"    public final static String DOTTED_LINE \u003d \"***********************(^.^)***************************\";","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"juneja999"},"content":"    public final static String AJ_TEXT_INDENTATION \u003d \" \".repeat(7);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"juneja999"},"content":"    //to provide indentation when bot replies","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"juneja999"},"content":"    //used to segregate user and bot text","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"juneja999"},"content":"    public static void getDottedLine(){","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"juneja999"},"content":"        System.out.println(DOTTED_LINE+\"\\n\");","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"juneja999"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"juneja999"},"content":"        UiMessages.getInitialGreeting();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"juneja999"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"juneja999"},"content":"        int defaultCaseTurn \u003d0; //used in the default case when task type not identified","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"juneja999"},"content":"        while(true){","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"juneja999"},"content":"            String userCommand \u003d UserCommands.getUserCommand(); //string version","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"juneja999"},"content":"            Task task \u003d new Task(userCommand); // Task version","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"juneja999"},"content":"            getDottedLine(); //the upper dotted line","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"juneja999"},"content":"            if(userCommand.equals(\"bye\")){","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"juneja999"},"content":"                UiMessages.AJExitMessage();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"juneja999"},"content":"                taskList.GetSaveTasksToFile();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"juneja999"},"content":"                //save the updated file once the user has exited","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"juneja999"},"content":"                break;","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"juneja999"},"content":"            } else if(userCommand.equals(\"list\")){","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"juneja999"},"content":"                taskList.printTaskList();","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"juneja999"},"content":"//                    //the taskList has a protected attribute taskList(mention in file TaskList,","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"juneja999"},"content":"//                    // I\u0027m accessing the index of that attribute)","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"juneja999"},"content":"            } else{","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"juneja999"},"content":"                String[] userCommandSplitArray \u003d Parser.userCommandParser(userCommand.split(\" \"));","lastModifiedDate":"2025-03-10","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"juneja999"},"content":"                // array containing only user words, no whitespaces","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"juneja999"},"content":"                //to tackle edge cases - when extra white spaces between words","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"juneja999"},"content":"                String targetWord \u003d userCommandSplitArray[0].toLowerCase();","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"juneja999"},"content":"                if(defaultCaseTurn\u003d\u003d1){","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"juneja999"},"content":"                    targetWord\u003d\"make sure user doesnt put in mark/unmark etc at this stage\";","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"juneja999"},"content":"                }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"juneja999"},"content":"                switch (targetWord.toLowerCase()){ //\u003c------feature","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"juneja999"},"content":"                case \"mark\":","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"juneja999"},"content":"                case \"unmark\":","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"juneja999"},"content":"                    //marking and unmarking follow the same logic, we just toggle the task status","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"juneja999"},"content":"                    int taskListIndex \u003d 0;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"juneja999"},"content":"                    try {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"juneja999"},"content":"                        taskListIndex \u003d Integer.parseInt(userCommandSplitArray[1]) - 1;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"juneja999"},"content":"                        //because we had shifted +1 when writing","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"juneja999"},"content":"                    } catch (NumberFormatException e) {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"juneja999"},"content":"                        UiMessages.RequestSerialNumber();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"juneja999"},"content":"                        break;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"juneja999"},"content":"                    }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"juneja999"},"content":"                    try {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"juneja999"},"content":"                        taskList.toggleTasks(taskListIndex, targetWord.toLowerCase().equals(\"unmark\") ? false : true);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"juneja999"},"content":"                        if(targetWord.toLowerCase().equals(\"unmark\")){","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"juneja999"},"content":"                            UiMessages.TaskUnmarkMessage();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"juneja999"},"content":"                            System.out.println(AJ_TEXT_INDENTATION + \"I have unmarked: \"+ \"[\"+taskList.taskList.get(taskListIndex).taskTypeChar+\"] \"","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"juneja999"},"content":"                                    +taskList.taskList.get(taskListIndex).taskDescription);","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"juneja999"},"content":"                            // taskList.taskList because I gave the same name in this file and TaskList file","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"juneja999"},"content":"                        }else{ //in the above line, .taskDescription gives the name, otherwise we get memory address","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"juneja999"},"content":"                            UiMessages.TaskMarkMessage();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"juneja999"},"content":"                            System.out.println(AJ_TEXT_INDENTATION +\"I have marked: \" +\"[\"+taskList.taskList.get(taskListIndex).taskTypeChar+\"] \"","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"juneja999"},"content":"                                    + taskList.taskList.get(taskListIndex).taskDescription);","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"juneja999"},"content":"                        }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"juneja999"},"content":"                    } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"juneja999"},"content":"                        if(taskListIndex \u003e\u003d0){","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"juneja999"},"content":"                            UiMessages.NotEnoughTaskMessage();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"juneja999"},"content":"                        }else{","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"juneja999"},"content":"                            UiMessages.RequestPositiveSerialNumber();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"juneja999"},"content":"                        }","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"juneja999"},"content":"                    }","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"juneja999"},"content":"                    break;","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"juneja999"},"content":"                case \"delete\":","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"juneja999"},"content":"                    int indexToBeDeleted\u003d0;","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"juneja999"},"content":"                    try{","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"juneja999"},"content":"                        indexToBeDeleted \u003d Integer.parseInt(userCommandSplitArray[1]) - 1;","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"juneja999"},"content":"                        if((taskList.getSize()\u003e\u003d indexToBeDeleted+1) \u0026\u0026 (indexToBeDeleted \u003e -1)){","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"juneja999"},"content":"                            System.out.println(AJ_TEXT_INDENTATION+\"Okay, no problem! ;)\");","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"juneja999"},"content":"                        }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"juneja999"},"content":"                        //this if statement insures that if user inputs index out of bounds the above statement is not","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"juneja999"},"content":"                        //printed , because that catch is will be triggered in the below line","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"juneja999"},"content":"                        System.out.println(AJ_TEXT_INDENTATION+\"I have \\\"avada kedavra\u0027d\\\": \"","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"juneja999"},"content":"                                +\"[\"+taskList.taskList.get(indexToBeDeleted).taskTypeChar+\"] \"+","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"juneja999"},"content":"                                taskList.taskList.get(indexToBeDeleted).taskDescription);","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"juneja999"},"content":"                        taskList.taskList.remove(indexToBeDeleted);","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"juneja999"},"content":"                    }catch(IndexOutOfBoundsException e){","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"juneja999"},"content":"                        if(indexToBeDeleted \u003e\u003d0){","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"juneja999"},"content":"                            UiMessages.NotEnoughTaskMessage();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"juneja999"},"content":"                        }else{","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"juneja999"},"content":"                            UiMessages.RequestPositiveSerialNumber();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"juneja999"},"content":"                        }","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"juneja999"},"content":"                    }catch(NumberFormatException e){","lastModifiedDate":"2025-02-26","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"juneja999"},"content":"                        UiMessages.RequestSerialNumber();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"juneja999"},"content":"                    }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"juneja999"},"content":"                    break;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"juneja999"},"content":"                case \"todo\":","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"juneja999"},"content":"                    ToDos taskToDos \u003d new ToDos(userCommand);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"juneja999"},"content":"                    taskList.addTask(taskToDos);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"juneja999"},"content":"                    System.out.println(AJ_TEXT_INDENTATION + \"Done!, added: \" + taskToDos.getTaskInfo());","lastModifiedDate":"2025-02-13","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"juneja999"},"content":"                    break;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"juneja999"},"content":"                case \"deadline\":","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"juneja999"},"content":"                    Deadlines taskDeadlines \u003d new Deadlines(Deadlines.getDeadlinesData(userCommandSplitArray)[0],","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"juneja999"},"content":"                            Deadlines.getDeadlinesData(userCommandSplitArray)[1] );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"juneja999"},"content":"                    taskList.addTask(taskDeadlines);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"juneja999"},"content":"                    System.out.println(AJ_TEXT_INDENTATION + \"Done!, added: \" + taskDeadlines.getTaskInfo());","lastModifiedDate":"2025-02-13","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"juneja999"},"content":"                    break;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"juneja999"},"content":"                case \"event\":","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"juneja999"},"content":"                    Events taskEvents \u003d new Events(Events.getEventsData(userCommandSplitArray)[0],","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"juneja999"},"content":"                            Events.getEventsData(userCommandSplitArray)[1],","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"juneja999"},"content":"                            Events.getEventsData(userCommandSplitArray)[2] );","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"juneja999"},"content":"                    taskList.addTask(taskEvents);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"juneja999"},"content":"                    System.out.println(AJ_TEXT_INDENTATION + \"Done!, added: \" + taskEvents.getTaskInfo());","lastModifiedDate":"2025-02-13","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"juneja999"},"content":"                    break;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"juneja999"},"content":"                case \"find\":","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"juneja999"},"content":"                    Boolean IsCaseSensitive \u003d userCommandSplitArray[1].toLowerCase().equals(\"cs\");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"juneja999"},"content":"                    TaskSearch.searchTask(IsCaseSensitive, userCommandSplitArray,taskList);","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"juneja999"},"content":"                    break;","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"juneja999"},"content":"                default:","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"juneja999"},"content":"                    //if user doesn\u0027t mention any of  the above","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"juneja999"},"content":"                    if(defaultCaseTurn \u003d\u003d 0){","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"juneja999"},"content":"                        AJExceptions.taskTypeNotFound(userCommand);","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"juneja999"},"content":"                        ToDos tempDefaultCase \u003d new ToDos(\"todo \"+userCommand);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"juneja999"},"content":"                        taskList.addTask(tempDefaultCase);","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"juneja999"},"content":"                        defaultCaseTurn \u003d 1;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"juneja999"},"content":"                    }else{","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"juneja999"},"content":"                        if(userCommand.equals(\"yes\")){","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"juneja999"},"content":"                            System.out.println(AJ_TEXT_INDENTATION + \"Done!, added: \"+","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"juneja999"},"content":"                                    taskList.taskList.get(taskList.getSize()-1).getTaskInfo());","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"juneja999"},"content":"                            //taskList has its own taskList(from class TaskList)","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"juneja999"},"content":"                        } else if (userCommand.equals(\"no\")) {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"juneja999"},"content":"                            System.out.println(AJ_TEXT_INDENTATION + \"Okay, got it boss!\");","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"juneja999"},"content":"                            taskList.removeTask(taskList.getSize()-1);","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"juneja999"},"content":"                        }else{","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"juneja999"},"content":"                            UiMessages.WrongCommandInDefaultCase();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"juneja999"},"content":"                            taskList.removeTask(taskList.getSize()-1);","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"juneja999"},"content":"                        }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"juneja999"},"content":"                        defaultCaseTurn \u003d 0;","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"juneja999"},"content":"                    }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"juneja999"},"content":"                    break;","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"juneja999"},"content":"                }","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"juneja999"},"content":"            }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"juneja999"},"content":"            getDottedLine(); // the lower dotted line","lastModifiedDate":"2025-02-03","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"juneja999"},"content":"        }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-01-29","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"juneja999"},"content":"}","lastModifiedDate":"2025-01-29","isFullCredit":false}],"authorContributionMap":{"juneja999":173}},{"path":"src/main/java/AJExceptions.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juneja999"},"content":"public class AJExceptions {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"juneja999"},"content":"    /**","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"juneja999"},"content":"     * this is string text is displayed when the task type ( event/t0d0/deadline) cannot be resolved for a task that user inputs","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"juneja999"},"content":"     * @param userCommand","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"juneja999"},"content":"     */","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"juneja999"},"content":"    public static void taskTypeNotFound(String userCommand) {","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION + \"Hmmm...sorry I couldn\u0027t resolve the task \\\"type\\\" for \"+\"\\\"\"+userCommand+\"\\\"\");","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION + \"After all I\u0027m still learning\" );","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION + \"Would you like to make this as a \\\"todo\\\"? Please input \\\"yes\\\"\" );","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION+\"if not, please input \\\"no\\\"\");","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"juneja999"},"content":"}","lastModifiedDate":"2025-02-14","isFullCredit":false}],"authorContributionMap":{"juneja999":14}},{"path":"src/main/java/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juneja999"},"content":"public class Deadlines extends Task {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"juneja999"},"content":"    public String by;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"juneja999"},"content":"    public Deadlines(String Description, String by) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"juneja999"},"content":"        super(Description);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"juneja999"},"content":"        this.taskTypeChar \u003d \"D\";","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"juneja999"},"content":"        this.by \u003d TimeInterpreter.InterpretTime(by);","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"juneja999"},"content":"    /**","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"juneja999"},"content":"     * this method enables us to segregate all the essential info of a deadline ( description and by date)","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"juneja999"},"content":"     * @param command user input","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"juneja999"},"content":"     * @return this segregated info in an array","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"juneja999"},"content":"     * index 0: description, index 1: by date","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"juneja999"},"content":"     */","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"juneja999"},"content":"    public static String[] getDeadlinesData(String[] command ){","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"juneja999"},"content":"        String[] deadlinesData \u003d new String[2];","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"juneja999"},"content":"        String deadlinesByDate \u003d \"\";","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"juneja999"},"content":"        String deadlinesDescription \u003d \"\";","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"juneja999"},"content":"        int byTime \u003d 0;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"juneja999"},"content":"        for(int i\u003d1;i\u003ccommand.length;i++){ //first word is deadlines, so skip it","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"juneja999"},"content":"            if(command[i].startsWith(\"/\")){","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"juneja999"},"content":"                //deadlinesByDate+\u003dcommand[i].substring(1); \u003c------- TO NOT HAVE MULTIPLE BY BY: STATEMENTS","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"juneja999"},"content":"                byTime \u003d 1;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"juneja999"},"content":"                continue;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"juneja999"},"content":"            }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"juneja999"},"content":"            if(byTime \u003d\u003d 1){","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"juneja999"},"content":"                deadlinesByDate +\u003d \" \"+command[i];","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"juneja999"},"content":"            }else{","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"juneja999"},"content":"                deadlinesDescription +\u003d command[i]+\" \";","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"juneja999"},"content":"            }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"juneja999"},"content":"        }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"juneja999"},"content":"        deadlinesData[0] \u003d deadlinesDescription;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"juneja999"},"content":"        deadlinesData[1] \u003d deadlinesByDate;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"juneja999"},"content":"        return deadlinesData;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"juneja999"},"content":"    public String getTaskInfo() {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"juneja999"},"content":"        return \"[\"+this.taskTypeChar+\"] \"+this.taskDescription+\" (By:\"+this.by+\")\"+\" \".repeat(4)+(this.isDone ? \"{completed}\" : \"\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"juneja999"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"juneja999":43}},{"path":"src/main/java/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juneja999"},"content":"public class Events extends Task {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"juneja999"},"content":"    public String from;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"juneja999"},"content":"    public String to;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"juneja999"},"content":"    public Events(String Description, String From, String To) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"juneja999"},"content":"        super(Description);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"juneja999"},"content":"        this.taskTypeChar \u003d \"E\";","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"juneja999"},"content":"        this.from \u003d TimeInterpreter.InterpretTime(From);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"juneja999"},"content":"        this.to \u003d TimeInterpreter.InterpretTime(To);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"juneja999"},"content":"    /**","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"juneja999"},"content":"     * helps us segregate event description, from date and to date","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"juneja999"},"content":"     * @param command inputted by user","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"juneja999"},"content":"     * @return this segregated info in an array","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"juneja999"},"content":"     * index 0: description, index 1: from date, index 2: to date","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"juneja999"},"content":"     */","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"juneja999"},"content":"    public static String[] getEventsData(String[] command) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"juneja999"},"content":"        String[] eventsData \u003d new String[]{\"\",\"\",\"\"};","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"juneja999"},"content":"        int fromTime \u003d 0;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"juneja999"},"content":"        int toTime \u003d 0;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"juneja999"},"content":"        for (int i \u003d 1; i \u003c command.length; i++) { //since the first word is going to be events","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"juneja999"},"content":"            if(command[i].startsWith(\"/\")) {","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"juneja999"},"content":"                if(fromTime \u003d\u003d 0) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"juneja999"},"content":"                    fromTime \u003d 1;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"juneja999"},"content":"                }else {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"juneja999"},"content":"                    toTime \u003d 1;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"juneja999"},"content":"                }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"juneja999"},"content":"                continue; // \u003c---------------------------------TO NOT HAVE MULTIPLE FROM/ TO","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"juneja999"},"content":"            }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"juneja999"},"content":"            if(fromTime \u003d\u003d 0 \u0026\u0026 toTime \u003d\u003d 0) {eventsData[0] +\u003d command[i]+\" \";}","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"juneja999"},"content":"            if( fromTime \u003d\u003d 1 \u0026\u0026 toTime \u003d\u003d 0) {eventsData[1] +\u003d \" \" + (command[i].startsWith(\"/\") ? command[i].substring(1) : command[i]);}","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"juneja999"},"content":"            if( fromTime \u003d\u003d 1  \u0026\u0026 toTime \u003d\u003d 1) {eventsData[2] +\u003d \" \" + (command[i].startsWith(\"/\") ? command[i].substring(1) : command[i]);}","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"juneja999"},"content":"        }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"juneja999"},"content":"        return eventsData;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"juneja999"},"content":"    public String getTaskInfo(){","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"juneja999"},"content":"        return \"[\"+this.taskTypeChar+\"] \"+this.taskDescription+\" \"+\"(From:\"+this.from +\" - To:\"+this.to +\")\"+","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"juneja999"},"content":"                \" \".repeat(4)+(this.isDone ? \"{completed}\" : \"\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"juneja999"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"juneja999":43}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juneja999"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-10","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-10","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"juneja999"},"content":"public class Parser {","lastModifiedDate":"2025-03-10","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-10","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"juneja999"},"content":"    /**","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"juneja999"},"content":"     * breaks the user command into words( broken at spaces)","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"juneja999"},"content":"     * @param command user input","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"juneja999"},"content":"     * @return an array consisting of words in user command","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"juneja999"},"content":"     */","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-10","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"juneja999"},"content":"    public static String[] userCommandParser(String[] command) {","lastModifiedDate":"2025-03-10","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"juneja999"},"content":"        ArrayList\u003cString\u003e output \u003d new ArrayList\u003cString\u003e();","lastModifiedDate":"2025-03-10","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"juneja999"},"content":"        for (int i \u003d 0; i \u003c command.length; i++) {","lastModifiedDate":"2025-03-10","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"juneja999"},"content":"            if (command[i].equals(\"\")) {","lastModifiedDate":"2025-03-10","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"juneja999"},"content":"                continue;","lastModifiedDate":"2025-03-10","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"juneja999"},"content":"            }","lastModifiedDate":"2025-03-10","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"juneja999"},"content":"            output.add(command[i]);","lastModifiedDate":"2025-03-10","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"juneja999"},"content":"        }","lastModifiedDate":"2025-03-10","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"juneja999"},"content":"        return output.toArray(new String[output.size()]);","lastModifiedDate":"2025-03-10","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-03-10","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"juneja999"},"content":"}","lastModifiedDate":"2025-03-10","isFullCredit":false}],"authorContributionMap":{"juneja999":21}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juneja999"},"content":"/**","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"juneja999"},"content":" * defines the behaviour of all Task types like events, deadlines and t0d0 ( which are its\u0027 subclasses)","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"juneja999"},"content":" */","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"juneja999"},"content":"public class Task {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"juneja999"},"content":"    protected String taskDescription;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"juneja999"},"content":"    protected Boolean isDone;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"juneja999"},"content":"    protected String taskTypeChar\u003d\"T\";","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"juneja999"},"content":"    //this is so that we can get the Name instead of memory address when converting Task to String","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"juneja999"},"content":"    public String getTaskDescription(Task task){","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"juneja999"},"content":"        return task.taskDescription;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"juneja999"},"content":"    public Task(String taskDescription) {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"juneja999"},"content":"        this.taskDescription \u003d taskDescription;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"juneja999"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"juneja999"},"content":"    /**","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"juneja999"},"content":"     * this method enables us to get all the essential information of a task(description, status, Task type)","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"juneja999"},"content":"     * @return all this information as a string","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"juneja999"},"content":"     */","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"juneja999"},"content":"    public String getTaskInfo(){","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"juneja999"},"content":"        return \"[\"+this.taskTypeChar+\"] \"+this.taskDescription+\" \".repeat(4)+ (this.isDone ? \"{completed}\" : \"\");","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"juneja999"},"content":"}","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"juneja999":28}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juneja999"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"juneja999"},"content":"import java.io.*;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"juneja999"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"juneja999"},"content":"/**","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"juneja999"},"content":" * this class creates a tasklist which is an arraylist consisting of type \u0027task\u0027","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"juneja999"},"content":" * it also contains methods like add task/delete task/toggling a task status/print the task list etc.","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"juneja999"},"content":" * this class also contains methods to load tasks from and save tasks to a hard drive","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"juneja999"},"content":" */","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"juneja999"},"content":"public class TaskList {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"juneja999"},"content":"    public static final String FILE_SEPARATOR \u003d \" ~ \";","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"juneja999"},"content":"    protected ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"juneja999"},"content":"    private static final String FILE_PATH \u003d \"UserData/SavedTasks.txt\";","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"juneja999"},"content":"    // Path to store tasks","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"juneja999"},"content":"    public TaskList() {","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"juneja999"},"content":"        loadTasksFromFile();","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"juneja999"},"content":"        // Load tasks from file when initializing","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"juneja999"},"content":"    public TaskList(Task task) {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"juneja999"},"content":"        taskList.add(task);","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"juneja999"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"juneja999"},"content":"        taskList.add(task);","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"juneja999"},"content":"        saveTasksToFile();","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"juneja999"},"content":"        // Save the updated task list to file after adding a task","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"juneja999"},"content":"    public int getSize() {","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"juneja999"},"content":"        return taskList.size();","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"juneja999"},"content":"    public String[] getTaskList(){","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"juneja999"},"content":"        String[] currentTaskList \u003d new String[taskList.size()];","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"juneja999"},"content":"        for(int i \u003d 0; i \u003c taskList.size(); i++){","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"juneja999"},"content":"            currentTaskList[i] \u003d taskList.get(i).taskDescription;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"juneja999"},"content":"        }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"juneja999"},"content":"        return currentTaskList;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"juneja999"},"content":"    public void printTaskList(){","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"juneja999"},"content":"        for(int i \u003d 0; i \u003c taskList.size(); i++){","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"juneja999"},"content":"            Task thisTask \u003d taskList.get(i);","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"juneja999"},"content":"            System.out.println(AJ.AJ_TEXT_INDENTATION + (i+1)+\"] \"+ thisTask.getTaskInfo());","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"juneja999"},"content":"        }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"juneja999"},"content":"    //to mark and unmark tasks","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"juneja999"},"content":"    public void toggleTasks(int taskListIndex, boolean markUnmark){","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"juneja999"},"content":"        taskList.get(taskListIndex).isDone \u003d markUnmark;","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"juneja999"},"content":"        saveTasksToFile();","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"juneja999"},"content":"        // Save the updated task list to file after adding a task","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-01-31","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"juneja999"},"content":"    public void removeTask(int taskListIndex){","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"juneja999"},"content":"        taskList.remove(taskListIndex);","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"juneja999"},"content":"        saveTasksToFile();","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"juneja999"},"content":"    /**","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"juneja999"},"content":"     * gives a getter function for calling save tasks to file function","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"juneja999"},"content":"     * this is mainly utilised after user exits the system","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"juneja999"},"content":"     */","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"juneja999"},"content":"    public void GetSaveTasksToFile(){","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"juneja999"},"content":"        saveTasksToFile();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"juneja999"},"content":"    /**","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"juneja999"},"content":"     * saves tasks to hard drive in teh location UserData-\u003eSavedTasks","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"juneja999"},"content":"     *continuously updated whenever a task is added, deleted or when the prgram is exited","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"juneja999"},"content":"     */","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"juneja999"},"content":"    // Save tasks to file","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"juneja999"},"content":"    private void saveTasksToFile() {","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"juneja999"},"content":"        try (FileWriter writer \u003d new FileWriter(FILE_PATH)) {","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"juneja999"},"content":"            int i\u003d0;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"juneja999"},"content":"            for (Task task : taskList) {","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"juneja999"},"content":"                switch (task.taskTypeChar) {","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"juneja999"},"content":"                case \"T\":","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"juneja999"},"content":"                    writer.write((i + 1) + FILE_SEPARATOR + task.taskTypeChar + FILE_SEPARATOR + task.taskDescription.trim() + FILE_SEPARATOR +","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"juneja999"},"content":"                            (task.isDone ? \"completed\" : \"yet to be completed\")+\"\\n\");","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"juneja999"},"content":"                    //format on how tasks are saved in the local file","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"juneja999"},"content":"                    break;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"juneja999"},"content":"                case \"D\":","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"juneja999"},"content":"                    assert task instanceof Deadlines;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"juneja999"},"content":"                    Deadlines deadlines \u003d (Deadlines) task;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"juneja999"},"content":"                    writer.write((i + 1) + FILE_SEPARATOR + deadlines.taskTypeChar + FILE_SEPARATOR + deadlines.taskDescription.trim() + FILE_SEPARATOR +","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"juneja999"},"content":"                            deadlines.by.trim() + FILE_SEPARATOR + (deadlines.isDone ? \"completed\" : \"yet to be completed\")+\"\\n\");","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"juneja999"},"content":"                    break;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"juneja999"},"content":"                case \"E\":","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"juneja999"},"content":"                    assert task instanceof Events;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"juneja999"},"content":"                    Events events \u003d (Events) task;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"juneja999"},"content":"                    writer.write((i + 1) + FILE_SEPARATOR + events.taskTypeChar + FILE_SEPARATOR + events.taskDescription.trim() + FILE_SEPARATOR +","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"juneja999"},"content":"                            events.from.trim() + \" - \" + events.to.trim() + FILE_SEPARATOR + (events.isDone ? \"completed\" : \"yet to be completed\")+\"\\n\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"juneja999"},"content":"                    break;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"juneja999"},"content":"                }","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"juneja999"},"content":"                i++;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"juneja999"},"content":"            }","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"juneja999"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"juneja999"},"content":"            System.out.println(AJ.AJ_TEXT_INDENTATION + \"Error saving tasks to file.\" + e.getMessage());","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"juneja999"},"content":"        }","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"juneja999"},"content":"    /**","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"juneja999"},"content":"     * this method loads tasks from the hard drive on the start of the program","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"juneja999"},"content":"     * For the first time user, if a directory called \"User Data\" doesnt exist then it adds one, it further creates a file","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"juneja999"},"content":"     * called SavedTasks","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"juneja999"},"content":"     */","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"juneja999"},"content":"    private void loadTasksFromFile() {","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"juneja999"},"content":"        File directory \u003d new File(\"UserData\");","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"juneja999"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"juneja999"},"content":"            // Create the directory if it doesn\u0027t exist","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"juneja999"},"content":"            if (directory.mkdirs()) {","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"juneja999"},"content":"                UiMessages.DirectoryCreation();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"juneja999"},"content":"            } else {","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"juneja999"},"content":"                UiMessages.FailedDirectoryCreation();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"juneja999"},"content":"            }","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"juneja999"},"content":"        }","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"juneja999"},"content":"        File file \u003d new File(FILE_PATH);","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"juneja999"},"content":"        try {","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"juneja999"},"content":"            if (!file.exists()) {","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"juneja999"},"content":"                // If the file doesn\u0027t exist, create it","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"juneja999"},"content":"                if (file.createNewFile()) {","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"juneja999"},"content":"                    UiMessages.FileCreation();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"juneja999"},"content":"                } else {","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"juneja999"},"content":"                    UiMessages.FailedFileCreation();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"juneja999"},"content":"                }","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"juneja999"},"content":"            } else {","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"juneja999"},"content":"                Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"juneja999"},"content":"                while (scanner.hasNextLine()) {","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"juneja999"},"content":"                    String[] currentTask \u003d scanner.nextLine().split(FILE_SEPARATOR);","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"juneja999"},"content":"                    switch (currentTask[1]){","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"juneja999"},"content":"                        case \"T\":","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"juneja999"},"content":"                            Task savedTask \u003d new Task(currentTask[2]);","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"juneja999"},"content":"                            savedTask.isDone \u003d (currentTask[3].equals(\"completed\"));","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"juneja999"},"content":"                            taskList.add(savedTask);","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"juneja999"},"content":"                            break;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"juneja999"},"content":"                        case \"D\":","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"juneja999"},"content":"                            Deadlines savedDeadlines \u003d new Deadlines(currentTask[2], currentTask[3]);","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"juneja999"},"content":"                            savedDeadlines.isDone \u003d (currentTask[4].equals(\"completed\"));","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"juneja999"},"content":"                            taskList.add(savedDeadlines);","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"juneja999"},"content":"                            break;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"juneja999"},"content":"                        case \"E\":","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"juneja999"},"content":"                            Events savedEvents \u003d new Events(currentTask[2],","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"juneja999"},"content":"                                    currentTask[3].split(\" - \")[0], currentTask[3].split(\" - \")[1]);","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"juneja999"},"content":"                            savedEvents.isDone \u003d (currentTask[4].equals(\"completed\"));","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"juneja999"},"content":"                            taskList.add(savedEvents);","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"juneja999"},"content":"                            break;","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":165,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":166,"author":{"gitId":"juneja999"},"content":"                    }","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":167,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":168,"author":{"gitId":"juneja999"},"content":"                }","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":169,"author":{"gitId":"juneja999"},"content":"                scanner.close();","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":170,"author":{"gitId":"juneja999"},"content":"            }","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":171,"author":{"gitId":"juneja999"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":172,"author":{"gitId":"juneja999"},"content":"            System.out.println(AJ.AJ_TEXT_INDENTATION + \"Error reading the tasks file: \" + e.getMessage());","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":173,"author":{"gitId":"juneja999"},"content":"        }","lastModifiedDate":"2025-02-28","isFullCredit":false},{"lineNumber":174,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":175,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-02-14","isFullCredit":false},{"lineNumber":176,"author":{"gitId":"juneja999"},"content":"}","lastModifiedDate":"2025-01-31","isFullCredit":false}],"authorContributionMap":{"juneja999":176}},{"path":"src/main/java/TaskSearch.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juneja999"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"juneja999"},"content":"/**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"juneja999"},"content":" * class that helps with task searching","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"juneja999"},"content":" */","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"juneja999"},"content":"public class TaskSearch {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"juneja999"},"content":"    /**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"juneja999"},"content":"     * method responsible for task searching","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"juneja999"},"content":"     * @param isCaseSensitive tells us whether the search should be case-sensitive or not","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"juneja999"},"content":"     * @param wordsToSearch gives the words for which user is searching","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"juneja999"},"content":"     * @param taskList is the task list from AJ that is being continuously updated","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"juneja999"},"content":"     */","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"juneja999"},"content":"    public static void searchTask(Boolean isCaseSensitive, String[] wordsToSearch, TaskList taskList) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"juneja999"},"content":"        Boolean foundSearch \u003d false;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"juneja999"},"content":"        ArrayList\u003cString\u003e tasksWithTargetWord \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"juneja999"},"content":"        for (int i \u003d 2; i \u003c wordsToSearch.length; i++) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"juneja999"},"content":"            //starting from 2 because 0th word is find and 1st word is cs/ncs","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"juneja999"},"content":"            String TargetWord \u003d (isCaseSensitive) ? wordsToSearch[i] : wordsToSearch[i].toLowerCase();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"juneja999"},"content":"            for (int k \u003d 0; k \u003c taskList.getSize()  ; k++) {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"juneja999"},"content":"                if (taskList.taskList.get(k).taskDescription.contains(TargetWord) ) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"juneja999"},"content":"                    //these cases are neccesary otherwise it will detect for eg: jupyter for py","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"juneja999"},"content":"                    tasksWithTargetWord.add(taskList.taskList.get(k).getTaskInfo());","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"juneja999"},"content":"                    foundSearch \u003d true;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"juneja999"},"content":"                }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"juneja999"},"content":"            }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"juneja999"},"content":"        }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"juneja999"},"content":"        if (foundSearch) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"juneja999"},"content":"            System.out.println(\"Here is what I found: \");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"juneja999"},"content":"            for (int j \u003d 0; j \u003c tasksWithTargetWord.size(); j++) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"juneja999"},"content":"                System.out.println(j + 1 + \"] \" + tasksWithTargetWord.get(j));","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"juneja999"},"content":"                //to display from 1","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"juneja999"},"content":"            }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"juneja999"},"content":"            return;","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"juneja999"},"content":"        }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"juneja999"},"content":"        System.out.println(\"Nothing found :(\");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"juneja999"},"content":"}","lastModifiedDate":"2025-03-11","isFullCredit":false}],"authorContributionMap":{"juneja999":40}},{"path":"src/main/java/TimeInterpreter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juneja999"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"juneja999"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"juneja999"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"juneja999"},"content":"/**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"juneja999"},"content":" * this class helps the programme understand and save dates and times if they are provided in the correct format","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"juneja999"},"content":" */","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"juneja999"},"content":"public class TimeInterpreter {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"juneja999"},"content":"            public static String InterpretTime(String inputTime) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"juneja999"},"content":"                String outputTime \u003d \"\";","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"juneja999"},"content":"                DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"juneja999"},"content":"                //format expected from user","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"juneja999"},"content":"                DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, hh:mm a\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"juneja999"},"content":"                //format given by system","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"juneja999"},"content":"                try {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"juneja999"},"content":"                    LocalDateTime date \u003d LocalDateTime.parse(inputTime.strip(), inputFormatter);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"juneja999"},"content":"                    outputTime \u003d date.format(outputFormatter);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"juneja999"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"juneja999"},"content":"                    //when input format is wrong, AJ will directly save what user wrote","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"juneja999"},"content":"                    outputTime \u003d inputTime;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"juneja999"},"content":"                }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"juneja999"},"content":"                return outputTime;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"juneja999"},"content":"            }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"juneja999"},"content":"}","lastModifiedDate":"2025-03-11","isFullCredit":false}],"authorContributionMap":{"juneja999":28}},{"path":"src/main/java/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juneja999"},"content":"/**","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"juneja999"},"content":" * task type t0d0 - has no time attribute","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"juneja999"},"content":" */","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"juneja999"},"content":"public class ToDos extends Task{","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"juneja999"},"content":"    public ToDos(String Description){","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"juneja999"},"content":"        super(Description.substring(Description.indexOf(\" \")+1).strip());","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"juneja999"},"content":"        //because the first word is going to be \"todos\"","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"juneja999"},"content":"        this.taskTypeChar\u003d\"T\";","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"juneja999"},"content":"}","lastModifiedDate":"2025-02-07","isFullCredit":false}],"authorContributionMap":{"juneja999":11}},{"path":"src/main/java/UiMessages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juneja999"},"content":"/**","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"juneja999"},"content":" * this class contains the most common messages that appear throughout the code like initial greeting, exit message,","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"juneja999"},"content":" * file creation, file creation error etc.","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"juneja999"},"content":" * NOTE:- we do NOT include all text that is displayed on CLI because some print statements have strings +","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"juneja999"},"content":" * information printed from other files to which UiMessages does not have direct access.","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"juneja999"},"content":" * Ex: Many times we print the task info and to get the updated tasklist in this class would be more difficult than","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"juneja999"},"content":" * excluding those print statements from this class and directly printing them from the class in which they are being","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"juneja999"},"content":" * manipulated ","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"juneja999"},"content":" */","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"juneja999"},"content":"public class UiMessages {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"juneja999"},"content":"    //Messages in AJ","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"juneja999"},"content":"    public static void getInitialGreeting() {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"juneja999"},"content":"        AJ.getDottedLine();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"juneja999"},"content":"        System.out.println(\"Hi there! I\u0027m AJ, always happy to help :) \");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"juneja999"},"content":"        System.out.println(\"What\u0027s on your mind?\");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"juneja999"},"content":"        AJ.getDottedLine();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"juneja999"},"content":"        System.out.println(\"PS:In case I don\u0027t see you later, good afternoon, good evening, and good night\");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"juneja999"},"content":"        AJ.getDottedLine();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"juneja999"},"content":"    public static void AJExitMessage() {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION + \"Bye,take care! May your device\u0027s battery never run out.\");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"juneja999"},"content":"        AJ.getDottedLine();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"juneja999"},"content":"    public static void RequestSerialNumber() {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION + \"Sorry, I would need the serial number of the task\");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION + \"Please try again!\");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"juneja999"},"content":"    public static void TaskUnmarkMessage() {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION +\"Got it. No worries! you will do it soon.\");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"juneja999"},"content":"    public static void TaskMarkMessage() {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION +\"Let\u0027s gooo!! Keep up the productivity.\");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"juneja999"},"content":"    public static void NotEnoughTaskMessage() {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION+\"Mr. overachiever, you dont have that many tasks!, if only I could be like you\");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"juneja999"},"content":"    public static void RequestPositiveSerialNumber() {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION+\"Sorry but that serial number was not recognised, please try again!\");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION+\"Please try to input a non-zero positive serial number\");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"juneja999"},"content":"    public static void WrongCommandInDefaultCase(){","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION + \"That command could not be recognised \" +","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"juneja999"},"content":"                \"for this instance.\" );","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION+\"Please try adding the task again. Thanks!\");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"juneja999"},"content":"    //Messages in TaskList for storage","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"juneja999"},"content":"    public static void DirectoryCreation() {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION + \"Directory \u0027UserData\u0027 has been created for you\");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"juneja999"},"content":"    public static void FailedDirectoryCreation() {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION + \"Failed to create \u0027UserData\u0027 directory.\");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"juneja999"},"content":"    public static void FileCreation() {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION + \"I will also create a new file to save your tasks ;)\");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION + \"You can access it via UserData -\u003e SavedTasks.txt\");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.DOTTED_LINE);","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"juneja999"},"content":"    public static void FailedFileCreation() {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"juneja999"},"content":"        System.out.println(AJ.AJ_TEXT_INDENTATION + \"Failed to create tasks file.\");","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"juneja999"},"content":"}","lastModifiedDate":"2025-03-11","isFullCredit":false}],"authorContributionMap":{"juneja999":78}},{"path":"src/main/java/UserCommands.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juneja999"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"juneja999"},"content":"public class UserCommands {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"juneja999"},"content":"    /**","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"juneja999"},"content":"     * takes user commands","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"juneja999"},"content":"     * @return stripped user command to AJ.java","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"juneja999"},"content":"     */","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"juneja999"},"content":"    public static String getUserCommand() {","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"juneja999"},"content":"        String userCommand;","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"juneja999"},"content":"        Scanner input \u003d new Scanner(System.in);","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"juneja999"},"content":"        userCommand \u003d input.nextLine();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"juneja999"},"content":"        return userCommand.strip();","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"juneja999"},"content":"    }","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"juneja999"},"content":"","lastModifiedDate":"2025-03-11","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"juneja999"},"content":"}","lastModifiedDate":"2025-03-11","isFullCredit":false}],"authorContributionMap":{"juneja999":16}}]
