[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"# Finnbot User Guide","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":"Finnbot is a Personal Assistant Chatbot that helps you keep track of various tasks, ","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":"events, and deadlines. Itâ€™s designed to make organizing your life easier by providing","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":"you with a simple way to create, manage, and track your tasks in real-time. ","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":"Finnbot is named after my beloved 7-year-old Ragdoll cat.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":"# Features ","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"Notes about the command format:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"- Words in `UPPER_CASE` are the parameters to be supplied by the user. ","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"eg. in `todo DESCRIPTION`, `DESCRIPTION` is a parameter which can be ","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"used as `todo watch clothes`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"## Adding todo: `todo`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"Adds a todo to the task list","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"Format: `todo DESCRIPTION`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"* Todo description cannot be empty","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"Example: `todo wash clothes`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"Expected output:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"```","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"samstt"},"content":"Added todo task:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"samstt"},"content":"[T][ ]  wash clothes","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"samstt"},"content":"```","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"samstt"},"content":"## Adding deadlines: `deadline`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"samstt"},"content":"Add a deadline to the task list","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"samstt"},"content":"Format: `deadline DESCRIPTION /by TIME`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"samstt"},"content":"* Deadline description and time cannot be empty","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"samstt"},"content":"Example: `deadline finish projects /by sunday`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"samstt"},"content":"Expected output:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"samstt"},"content":"```","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"samstt"},"content":"Added deadline:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"samstt"},"content":"[D][ ]  finish projects (by: sunday)","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"samstt"},"content":"```","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"samstt"},"content":"## Adding event: `event`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"samstt"},"content":"Add an event to the task list","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"samstt"},"content":"Format: `event DESCRIPTION /from STARTTIME /to ENDTIME`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"samstt"},"content":"* Description, start time and end time of the event cannot be empty","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"samstt"},"content":"Example: `event gala dinner /from monday 6pm /to monday 9pm`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"samstt"},"content":"Expected output:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"samstt"},"content":"```","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"samstt"},"content":"Added event:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"samstt"},"content":"[E][ ]  gala dinner (from: monday 6pm , to: monday 9pm)","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"samstt"},"content":"```","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"samstt"},"content":"## List out tasks: `list`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"samstt"},"content":"List out all the tasks that have been added to the task list","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"samstt"},"content":"Format: `list`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"samstt"},"content":"## Mark tasks as done `mark`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"samstt"},"content":"Mark a task as done based on the given task index","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"samstt"},"content":"Format: `mark INDEX`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"samstt"},"content":"Example: `mark 1`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"samstt"},"content":"Expected output:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"samstt"},"content":"```","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"samstt"},"content":"Meow! I marked this task as done:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"samstt"},"content":"[D][X]  finish projects (by: sunday)","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"samstt"},"content":"```","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"samstt"},"content":"## Unmark tasks `unmark`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"samstt"},"content":"Unmark a task based on the given task index","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"samstt"},"content":"Format: `unmark INDEX`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"samstt"},"content":"Example: `unmark 1`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"samstt"},"content":"Expected output:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"samstt"},"content":"Meow! You unmarked this task:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"samstt"},"content":"[D][ ]  finish projects (by: sunday)","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"samstt"},"content":"## Delete task `task`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"samstt"},"content":"Delete a task based on the specified task index","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"samstt"},"content":"Format: `delete INDEX`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"samstt"},"content":"Example: `delete 2`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"samstt"},"content":"Expected output:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"samstt"},"content":"```","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"samstt"},"content":"Meow! I\u0027ve removed this task for you:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"samstt"},"content":"[T][ ]  wash clothes","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"samstt"},"content":"Now you have 2 tasks","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"samstt"},"content":"```","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"samstt"},"content":"## Find tasks using keyword `find`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"samstt"},"content":"Search through task list for tasks that contain the specified keyword","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"samstt"},"content":"Format: `find KEYWORD`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"samstt"},"content":"* The search is case-insensitive, eg gala will match GALA","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"samstt"},"content":"* Only full words will be matched","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"samstt"},"content":"* Find can only handle one full keyword during each execution","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"samstt"},"content":"Example: `find gala`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"samstt"},"content":"Expected output:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"samstt"},"content":"```","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"samstt"},"content":"Meowzzers! Here are the matching tasks:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"samstt"},"content":"1. [E][ ]  gala dinner (from: monday 6pm , to: monday 9pm)","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"samstt"},"content":"```","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"samstt"},"content":"## Exit Finnbot `bye`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"samstt"},"content":"Exit the program ","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-01-07","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"samstt"},"content":"Example: `bye`","lastModifiedDate":"2025-03-14","isFullCredit":false}],"authorContributionMap":{"samstt":126,"-":16}},{"path":"src/main/java/finnbot/Finnbot.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"import finnbot.command.Command;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"import finnbot.exceptions.EmptyInputException;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":"import finnbot.exceptions.InvalidCommandException;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":" * Represents the main logic of the Finnbot application.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":" * This class handles the initialization of components, the execution of commands, and the","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":" * interaction with the user through the command-line interface.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":" * The bot processes user inputs and performs actions based on parsed commands.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"public class Finnbot {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"    private static Ui ui;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"    private Storage storage;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"    private static TasksList tasks;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"     * Constructs a {@code Finnbot} instance with the specified file path.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"     * Initializes the user interface, storage, and task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"     * @param filePath The file path where the tasks are stored.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"    public Finnbot(String filePath) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"        tasks \u003d new TasksList(filePath);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"     * Starts the main loop of the Finnbot application.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"samstt"},"content":"     * Greets the user, continuously reads and processes commands,","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"samstt"},"content":"     * executes tasks, and handles errors.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"samstt"},"content":"     * The loop continues until an exit condition is met.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"samstt"},"content":"    public void run() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"samstt"},"content":"        ui.greetUser();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"samstt"},"content":"        ui.printLine();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"samstt"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"samstt"},"content":"        while (!isExit) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"samstt"},"content":"            try {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"samstt"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"samstt"},"content":"                ui.printLine();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"samstt"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"samstt"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"samstt"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"samstt"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"samstt"},"content":"                ui.showError(\"The given number is not within bounds meoww :3\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"samstt"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"samstt"},"content":"                ui.showError(\"Purr please try again\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"samstt"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"samstt"},"content":"                ui.showError(\"HISSSS, you\u0027ve given me an invalid command\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"samstt"},"content":"            } catch (InvalidCommandException | EmptyInputException e) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"samstt"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"samstt"},"content":"            } finally {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"samstt"},"content":"                ui.printLine();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"samstt"},"content":"            }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"samstt"},"content":"        }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"samstt"},"content":"     * The entry point for running the Finnbot application.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"samstt"},"content":"     * Initializes the Finnbot instance and begins its execution.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"samstt"},"content":"     * @param args Command-line arguments","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"samstt"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"samstt"},"content":"       new Finnbot(\"./data.txt\").run();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-02-05","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-02-05","isFullCredit":false}],"authorContributionMap":{"samstt":71}},{"path":"src/main/java/finnbot/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"import finnbot.command.*;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":"import finnbot.exceptions.EmptyInputException;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":"import finnbot.exceptions.InvalidCommandException;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":" * Represents a command parser for processing user inputs in the Finnbot application.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":" * This class is responsible for parsing the user\u0027s input and converting it into corresponding command objects","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":" * that can be executed to perform specific actions within the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"public class Parser {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"     * Parses the user input into a command object based on the input string.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"     * @param input The user input command string.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"     * @return A corresponding {@link Command} object based on the parsed input.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"     * @throws InvalidCommandException If the input command is invalid or not recognized.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"     * @throws EmptyInputException If the input is missing required information (e.g., task descriptions).","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"    public static Command parse(String input) throws InvalidCommandException, EmptyInputException {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"        String[] words \u003d input.split(\" \", 2);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"        String commandType \u003d words[0].toLowerCase();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"        switch (commandType) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"        case \"list\":","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"            return new ListCommand();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"samstt"},"content":"        case \"mark\":","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"samstt"},"content":"            try {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"samstt"},"content":"                return new MarkCommand(Integer.parseInt(words[1]) - 1);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"samstt"},"content":"            } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"samstt"},"content":"                throw new InvalidCommandException(\"HISSSS!! Provide a valid task number for me to mark\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"samstt"},"content":"            }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"samstt"},"content":"        case \"unmark\":","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"samstt"},"content":"            try {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"samstt"},"content":"                return new UnmarkCommand(Integer.parseInt(words[1]) - 1);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"samstt"},"content":"            } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"samstt"},"content":"                throw new InvalidCommandException(\"HISSSS! Provide a valid task number for me to unmark 3:\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"samstt"},"content":"            }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"samstt"},"content":"        case \"delete\":","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"samstt"},"content":"            try {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"samstt"},"content":"                return new DeleteCommand(Integer.parseInt(words[1]) - 1);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"samstt"},"content":"            } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"samstt"},"content":"                throw new InvalidCommandException(\"HISSSS! Provide a valid task number for me to delete 3:\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"samstt"},"content":"            }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"samstt"},"content":"        case \"todo\":","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"samstt"},"content":"            if (words.length \u003c 2 ) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"samstt"},"content":"                throw new EmptyInputException(\"Todo format should be: todo [description]\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"samstt"},"content":"            } else if (words[1].trim().isEmpty()) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"samstt"},"content":"                throw new EmptyInputException(\"HISSSS! Todo description cannot be empty!\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"samstt"},"content":"            }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"samstt"},"content":"            String todoDescription \u003d words[1].trim();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"samstt"},"content":"            return new ToDoCommand(todoDescription);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"samstt"},"content":"        case \"event\":","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"samstt"},"content":"            input \u003d input.toLowerCase().replaceFirst(\"event\", \"\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"samstt"},"content":"            String[] parts \u003d input.split(\"/from|/to\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"samstt"},"content":"            if (parts.length \u003c 3 ) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"samstt"},"content":"                throw new InvalidCommandException(\"Event format should be: event [description] /from [start] /to [end] , why don\u0027t you try again? :3\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"samstt"},"content":"            } else if (parts[0].trim().isEmpty()) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"samstt"},"content":"                throw new InvalidCommandException(\"HISSSS! Event description cannot be empty\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"samstt"},"content":"            } else if (parts[1].trim().isEmpty() || parts[2].trim().isEmpty()) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"samstt"},"content":"                throw new InvalidCommandException(\"HISSSS! Start time or end time cannot be empty\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"samstt"},"content":"            }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"samstt"},"content":"            String eventDescription \u003d parts[0].trim();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"samstt"},"content":"            String start \u003d parts[1];","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"samstt"},"content":"            String end \u003d parts[2];","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"samstt"},"content":"            return new EventCommand(eventDescription, start, end);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"samstt"},"content":"        case \"deadline\":","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"samstt"},"content":"            input \u003d input.toLowerCase().replaceFirst(\"deadline\", \"\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"samstt"},"content":"            String[] deadlineParts \u003d input.split(\"/by\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"samstt"},"content":"            if (deadlineParts.length \u003c 2) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"samstt"},"content":"                throw new InvalidCommandException(\"Deadline format should be: deadline [description] /by [date], why don\u0027t you try it again?\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"samstt"},"content":"            } else if (deadlineParts[0].trim().isEmpty()) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"samstt"},"content":"                throw new InvalidCommandException(\"HISSSS! Deadline description cannot be empty!!\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"samstt"},"content":"            } else if (deadlineParts[1].trim().isEmpty()) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"samstt"},"content":"                throw new InvalidCommandException(\"HISSSS! Deadline date cannot be empty!!\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"samstt"},"content":"            }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"samstt"},"content":"            String deadlineDescription \u003d deadlineParts[0].trim();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"samstt"},"content":"            String by \u003d deadlineParts[1];","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"samstt"},"content":"            return new DeadlineCommand(deadlineDescription, by);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"samstt"},"content":"        case \"find\":","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"samstt"},"content":"            if (words.length \u003c 2 || words[1].trim().isEmpty()) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"samstt"},"content":"                throw new InvalidCommandException(\"Meoww! You need to enter a keyword to search for :3\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"samstt"},"content":"            }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"samstt"},"content":"            String keyword \u003d words[1].trim();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"samstt"},"content":"            return new FindCommand(keyword);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"samstt"},"content":"        case \"bye\":","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"samstt"},"content":"            return new ExitCommand();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"samstt"},"content":"        default:","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"samstt"},"content":"            throw new InvalidCommandException(\"Meoww, I\u0027m not sure what you want me to do...\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"samstt"},"content":"        }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"samstt":107}},{"path":"src/main/java/finnbot/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"import finnbot.tasks.Events;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":"import finnbot.tasks.Tasks;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":"import finnbot.tasks.ToDos;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":"import finnbot.tasks.Deadlines;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":"import java.io.*;","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":" * Represents a storage system for saving and loading tasks in the Finnbot application.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":" * This class handles the creation of the save file, reading tasks from it, and writing tasks back into the file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":" * The tasks are stored in a file formatted as plain text.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"public class Storage {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"    public static final String FILEPATH \u003d \"./data.txt\";","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"     * Constructs a new Storage object and creates a new file at the specified location if it doesn\u0027t exist.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"     * Prints a message indicating the file\u0027s creation status.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"    public Storage() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"        try {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"            File f \u003d new File(FILEPATH);","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"            if (f.createNewFile()) {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"                System.out.println(\"File created: \" + f.getAbsolutePath());","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"            } else {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"                System.out.println(\"File already exists: \" + f.getAbsolutePath());","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"            }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"samstt"},"content":"            System.out.println(\"Error creating file: \");","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"samstt"},"content":"        }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"samstt"},"content":"     * Saves the current list of tasks to a specified file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"samstt"},"content":"     * Writes each task\u0027s details to the file in a specific format.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"samstt"},"content":"     * @param tasks The list of tasks to save.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"samstt"},"content":"     * @param file The file to which the tasks will be written.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"samstt"},"content":"    public static void saveFile(TasksList tasks, File file) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"samstt"},"content":"        try {BufferedWriter bw \u003d new BufferedWriter(new FileWriter(file));","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"samstt"},"content":"            for (Tasks task : tasks.getTasksList()) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"samstt"},"content":"                if (task !\u003d null) {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"samstt"},"content":"                    bw.write(task.toFileString() + System.lineSeparator());","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"samstt"},"content":"                }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"samstt"},"content":"            }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"samstt"},"content":"            bw.flush();","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"samstt"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"samstt"},"content":"            System.out.println(\"Error saving file: \");","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"samstt"},"content":"        }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"samstt"},"content":"     * Loads tasks from a file and returns them as an ArrayList.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"samstt"},"content":"     * If the file does not exist, an empty task list is returned.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"samstt"},"content":"     * @param filename The name of the file to load tasks from.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"samstt"},"content":"     * @return An ArrayList containing the tasks loaded from the file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"samstt"},"content":"    public static ArrayList\u003cTasks\u003e loadFile(String filename) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"samstt"},"content":"        File file \u003d new File(filename);","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"samstt"},"content":"        ArrayList\u003cTasks\u003e tasksList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"samstt"},"content":"        if (!file.exists()) {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"samstt"},"content":"            System.out.println(\"No save file found! We\u0027ll start with a new list!\");","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"samstt"},"content":"            return tasksList;","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"samstt"},"content":"        }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"samstt"},"content":"        try (BufferedReader br \u003d new BufferedReader(new FileReader(FILEPATH))) {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"samstt"},"content":"            String line;","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"samstt"},"content":"            while ((line \u003d br.readLine()) !\u003d null) {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"samstt"},"content":"                tasksList.add(parseTask(line));","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"samstt"},"content":"            }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"samstt"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"samstt"},"content":"            System.out.println(\"Error loading file...\");","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"samstt"},"content":"        }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"samstt"},"content":"        return tasksList;","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"samstt"},"content":"     * Parses a line from the saved file into a task object.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"samstt"},"content":"     * Determines the task type (ToDos, Deadline, Event) based on the format in the file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"samstt"},"content":"     * @param line The line representing a task in the file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"samstt"},"content":"     * @return A Tasks object representing the parsed task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"samstt"},"content":"     * @throws IllegalArgumentException If the task format is invalid.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"samstt"},"content":"    private static Tasks parseTask(String line) {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"samstt"},"content":"        String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"samstt"},"content":"        if (parts.length \u003c\u003d 2 ) {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"samstt"},"content":"            throw new IllegalArgumentException(\"Invalid task format: \" + line);","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"samstt"},"content":"        }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"samstt"},"content":"        String taskType \u003d parts[0];","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"samstt"},"content":"        boolean isDone \u003d parts[1].equals(\"1\");","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"samstt"},"content":"        String description \u003d parts[2].trim();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"samstt"},"content":"        Tasks task;","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"samstt"},"content":"        switch (taskType) {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"samstt"},"content":"        case \"T\":","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"samstt"},"content":"            task \u003d new ToDos(description);","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"samstt"},"content":"            break;","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"samstt"},"content":"        case \"D\":","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"samstt"},"content":"            task \u003d new Deadlines(description, parts[3]);","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"samstt"},"content":"            break;","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"samstt"},"content":"        case \"E\":","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"samstt"},"content":"            String[] splitTimes \u003d parts[3].split(\"to\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"samstt"},"content":"            String startTime \u003d splitTimes[0];","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"samstt"},"content":"            String endTime \u003d splitTimes[1];","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"samstt"},"content":"            task \u003d new Events(description, startTime, endTime);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"samstt"},"content":"            break;","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"samstt"},"content":"        default:","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"samstt"},"content":"            throw new IllegalArgumentException(\"Invalid task type: \" + taskType);","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"samstt"},"content":"        }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"samstt"},"content":"        if(isDone) {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"samstt"},"content":"            task.setDone();","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"samstt"},"content":"        }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"samstt"},"content":"        return task;","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false}],"authorContributionMap":{"samstt":132}},{"path":"src/main/java/finnbot/TasksList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"import finnbot.tasks.Tasks;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":" * Represents a list of tasks in the Finnbot application.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":" * This class provides functionality for managing the tasks list such as adding, deleting, listing tasks,","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":" * and marking/unmarking tasks as done.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":"public class TasksList {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"    private final ArrayList\u003cTasks\u003e tasks;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"     * Constructs a new TasksList and loads tasks from a specified file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"     * @param fileName The name of the file from which tasks are loaded.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"    public TasksList(String fileName) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"        tasks \u003d Storage.loadFile(fileName);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"     * Adds a new task to the tasks list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"     * @param task The task to be added.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"    public void addTask(Tasks task) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"        tasks.add(task);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"samstt"},"content":"     * Deletes a task from the tasks list at the specified index.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"samstt"},"content":"     * If the index is invalid, a message is displayed indicating the issue.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"samstt"},"content":"     * @param taskIndex The index of the task to be deleted.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"samstt"},"content":"    public void deleteTask(int taskIndex) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"samstt"},"content":"        if (taskIndex \u003c 0 || taskIndex \u003e\u003d tasks.size()) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"samstt"},"content":"            System.out.println(\"Uh oh, the task number you have given me is out of bounds\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"samstt"},"content":"            return;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"samstt"},"content":"        }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"samstt"},"content":"        Tasks removedTask \u003d tasks.remove(taskIndex);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"samstt"},"content":"        System.out.println(\"Meow! I\u0027ve removed this task for you: \");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"samstt"},"content":"        System.out.println(removedTask);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"samstt"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"samstt"},"content":"     * Lists all tasks in the tasks list, displaying each task\u0027s number and details.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"samstt"},"content":"    public void listTasks() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"samstt"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"samstt"},"content":"            System.out.println(i+1 + \". \" + tasks.get(i));","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"samstt"},"content":"        }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"samstt"},"content":"    public ArrayList\u003cTasks\u003e keywordFinder(String keyword) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"samstt"},"content":"        ArrayList\u003cTasks\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"samstt"},"content":"        String lowerCaseKeyword \u003d keyword.toLowerCase();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"samstt"},"content":"        for (Tasks task : tasks) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"samstt"},"content":"            String[] words \u003d task.getDescription().toLowerCase().split(\"\\\\s+\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"samstt"},"content":"            for (String word : words) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"samstt"},"content":"                if (word.equals(lowerCaseKeyword)) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"samstt"},"content":"                    matchingTasks.add(task);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"samstt"},"content":"                    break;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"samstt"},"content":"                }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"samstt"},"content":"            }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"samstt"},"content":"        }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"samstt"},"content":"        return matchingTasks;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"samstt"},"content":" /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"samstt"},"content":"     * Returns the number of tasks in the tasks list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"samstt"},"content":"     * @return The size of the tasks list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"samstt"},"content":"    public int size() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"samstt"},"content":"        return tasks.size();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"samstt"},"content":"     * Returns the list of tasks.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"samstt"},"content":"     * @return An ArrayList containing all tasks in the list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"samstt"},"content":"    public ArrayList\u003cTasks\u003e getTasksList() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"samstt"},"content":"        return tasks;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"samstt"},"content":"     * Marks or unmarks a task as done based on the given index and boolean flag.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"samstt"},"content":"     * If the task index is invalid, a message is displayed indicating the issue.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"samstt"},"content":"     * @param taskIndex The index of the task to be marked/unmarked.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"samstt"},"content":"     * @param isMarked A boolean flag indicating whether the task should be marked or unmarked.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"samstt"},"content":"    public void taskMarker (int taskIndex, boolean isMarked) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"samstt"},"content":"        if (taskIndex \u003c 0 || taskIndex \u003e\u003d tasks.size()) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"samstt"},"content":"            System.out.println(\"Uh oh! The task number you have given me isn\u0027t in the list!\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"samstt"},"content":"            return;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"samstt"},"content":"        }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"samstt"},"content":"        Tasks task \u003d tasks.get(taskIndex);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"samstt"},"content":"        if (isMarked) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"samstt"},"content":"            task.setDone();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"samstt"},"content":"            System.out.println(\"Meow! I marked this task as done:\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"samstt"},"content":"        } else {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"samstt"},"content":"            task.isDone \u003d false;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"samstt"},"content":"            System.out.println(\"Meow! You unmarked this task:\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"samstt"},"content":"        }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"samstt"},"content":"        System.out.println(task);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"samstt":119}},{"path":"src/main/java/finnbot/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":" * Represents the user interface of Finnbot.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":" * This class is responsible for interacting with the user, including displaying messages,","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":" * reading user input, and handling errors.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":"public class Ui {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":"    private static final String line \u003d \"_*\".repeat(60);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"    private final Scanner scanner;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"     * Constructs a new Ui object and initializes the scanner.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"    public Ui() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"     * Greets the user with a welcome message when the program starts.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"    public void greetUser() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"        String greeting \u003d \"Meow! I\u0027m Finnbot!\" + System.lineSeparator() + \"How can I help you?\";","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"        System.out.println(line);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"        System.out.println(greeting);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"samstt"},"content":"     * Displays a goodbye message when the user exits the program.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"samstt"},"content":"    public void goodbye() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"samstt"},"content":"        String goodbye \u003d \"Purr.. Hope to see you again soon :3\";","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"samstt"},"content":"        System.out.println(goodbye);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"samstt"},"content":"     * Prints a separator line to format the output.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"samstt"},"content":"    public void printLine() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"samstt"},"content":"        System.out.println(line);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"samstt"},"content":"     * Reads the user\u0027s input from the console.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"samstt"},"content":"     * @return The input string entered by the user.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"samstt"},"content":"    public String readCommand() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"samstt"},"content":"        return scanner.nextLine();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"samstt"},"content":"     * Displays an error message to the user.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"samstt"},"content":"     * @param message The error message to be displayed.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"samstt"},"content":"    public void showError(String message) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"samstt"},"content":"        System.out.println(message);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"samstt"},"content":"     * Displays a general message to the user.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"samstt"},"content":"     * @param message The message to be displayed.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"samstt"},"content":"    public void showMessage(String message) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"samstt"},"content":"        System.out.println(message);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"samstt":72}},{"path":"src/main/java/finnbot/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot.command;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"import finnbot.Storage;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"import finnbot.TasksList;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":"import finnbot.Ui;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":" * Represents an abstract command that can be executed by Finnbot.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":" * Subclasses should implement the execute method to define specific behaviors.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":"public abstract class Command {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"     * Executes the command with the given task list, user interface, and storage.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"     * @param tasks The list of tasks to operate on.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"     * @param ui The user interface for interacting with the user.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"     * @param storage The storage handler for reading and writing task data to external file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"    public abstract void execute(TasksList tasks, Ui ui, Storage storage);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"     * Determines whether the command should terminate the program.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"     * @return {@code true} if the command terminates the program, {@code false} otherwise.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"    public boolean isExit() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"        return false;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"samstt":30}},{"path":"src/main/java/finnbot/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot.command;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"import finnbot.Storage;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":"import finnbot.TasksList;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":"import finnbot.Ui;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":"import finnbot.tasks.Deadlines;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":"import java.io.File;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":" * Represents a command that adds a deadline task to the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"    private final String description;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"    private final String by;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"     * Constructs a DeadlineCommand with the specified task description and deadline.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"     * @param by The due date of the deadline task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"    public DeadlineCommand(String description, String by) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"        this.by \u003d by;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"     * Executes the command by adding a deadline task to the task list,","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"     * displaying a confirmation message, and saving the updated list to storage.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"samstt"},"content":"     * @param tasks The task list where the deadline will be added.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"samstt"},"content":"     * @param ui The user interface to handle output messages.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"samstt"},"content":"     * @param storage The storage system to save task data.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"samstt"},"content":"    @Override","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"samstt"},"content":"    public void execute(TasksList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"samstt"},"content":"        Deadlines deadlineTask \u003d new Deadlines(description, by);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"samstt"},"content":"        tasks.addTask(deadlineTask);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"samstt"},"content":"        ui.showMessage(\"Added deadline: \");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"samstt"},"content":"        ui.showMessage(String.valueOf(deadlineTask));","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"samstt"},"content":"        storage.saveFile(tasks, new File(Storage.FILEPATH));","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"samstt":43}},{"path":"src/main/java/finnbot/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot.command;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"import finnbot.Storage;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"import finnbot.TasksList;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":"import finnbot.Ui;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":"import java.io.File;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":" * Represents a command that deletes a task from the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":"    private final int taskIndex;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"     * Constructs a DeleteCommand with the specified task index.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"     * @param taskIndex The index of the task to be deleted.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"    public DeleteCommand(int taskIndex) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"     * Executes the command by deleting a task from the task list,","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"     * displaying a confirmation message, and saving the updated list to storage.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"     * @param tasks The task list from which the task will be deleted.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"     * @param ui The user interface to handle output messages.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"     * @param storage The storage system to save task data.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"    @Override","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"samstt"},"content":"    public void execute(TasksList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"samstt"},"content":"        tasks.deleteTask(taskIndex);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"samstt"},"content":"        storage.saveFile(tasks, new File(Storage.FILEPATH));","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"samstt":35}},{"path":"src/main/java/finnbot/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot.command;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"import finnbot.Storage;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":"import finnbot.TasksList;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":"import finnbot.Ui;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":"import finnbot.tasks.Events;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":"import java.io.File;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":" * Represents a command that adds an event task to the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"    private final String description;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"    private final String startTime;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"    private final String endTime;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"     * Constructs an EventCommand with the specified task description, start time, and end time.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"     * @param startTime The start time of the event.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"     * @param endTime The end time of the event.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"    public EventCommand(String description, String startTime, String endTime) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"samstt"},"content":"     * Executes the command by adding an event task to the task list,","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"samstt"},"content":"     * displaying a confirmation message, and saving the updated list to storage.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"samstt"},"content":"     * @param tasks The task list where the event will be added.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"samstt"},"content":"     * @param ui The user interface to handle output messages.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"samstt"},"content":"     * @param storage The storage system to save task data.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"samstt"},"content":"    @Override","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"samstt"},"content":"    public void execute(TasksList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"samstt"},"content":"        Events event \u003d new Events(description, startTime, endTime);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"samstt"},"content":"        tasks.addTask(event);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"samstt"},"content":"        ui.showMessage(\"Added event:\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"samstt"},"content":"        ui.showMessage(String.valueOf(event));","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"samstt"},"content":"        storage.saveFile(tasks, new File(Storage.FILEPATH));","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"samstt":47}},{"path":"src/main/java/finnbot/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot.command;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"import finnbot.*;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":" * Represents a command that exits the program.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":"     * Executes the command by displaying a goodbye message.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"     * @param tasks The task list (not used in this command).","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"     * @param ui The user interface to handle output messages.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"     * @param storage The storage system (not used in this command).","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"    @Override","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"    public void execute(TasksList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"        ui.goodbye();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"     * Returns true to indicate that this command will terminate the program.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"     * @return true, since this command exits the program.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"    public boolean isExit() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"        return true;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"samstt":30}},{"path":"src/main/java/finnbot/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot.command;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"import finnbot.*;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":"import finnbot.TasksList;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":"import finnbot.Ui;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":"import finnbot.tasks.Tasks;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":" * The {@code FindCommand} class allows searching for tasks that contain a specific keyword.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":" * It interacts with the {@link TasksList} to find matching tasks and displays them using the UI.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"    private final String keyword;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"     * Constructs a {@code FindCommand} with the specified keyword.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"     * @param keyword The keyword to search for in the task descriptions.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"     * Executes the find command, searching for tasks that contain the keyword.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"     * If matching tasks are found, they are displayed using the provided {@code Ui}.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"     * Otherwise, a message indicating no matches are found is displayed.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"samstt"},"content":"     * @param tasks   The task list to search.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"samstt"},"content":"     * @param ui      The user interface for displaying messages.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"samstt"},"content":"     * @param storage The storage component (not used in this method, but included for consistency).","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"samstt"},"content":"    public void execute(TasksList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"samstt"},"content":"        ArrayList\u003cTasks\u003e matchingTasks \u003d tasks.keywordFinder(keyword);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"samstt"},"content":"        if (matchingTasks.isEmpty()) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"samstt"},"content":"            ui.showMessage(\"Meoww 3: I couldn\u0027t find any tasks with that keyword :(\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"samstt"},"content":"        } else {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"samstt"},"content":"            ui.showMessage(\"Meowzzers! Here are the matching tasks:\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"samstt"},"content":"            for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"samstt"},"content":"                ui.showMessage((i+1) + \". \" + matchingTasks.get(i));","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"samstt"},"content":"            }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"samstt"},"content":"        }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"samstt":48}},{"path":"src/main/java/finnbot/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot.command;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"import finnbot.Storage;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":"import finnbot.TasksList;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":"import finnbot.Ui;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":" * Represents a command that lists all tasks in the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":"public class ListCommand extends Command{","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"     * Executes the command by displaying all tasks in the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"     * If the list is empty, it notifies the user.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"     * @param tasks The task list to be displayed.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"     * @param ui The user interface to handle output messages.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"     * @param storage The storage system (not used in this command).","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"    @Override","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"    public void execute(TasksList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"            ui.showMessage(\"Meow, you have no tasks in your list!\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"        } else {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"            ui.showMessage(\"Here are your tasks:\");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"            tasks.listTasks();","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"        }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"samstt":31}},{"path":"src/main/java/finnbot/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot.command;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"import finnbot.Storage;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"import finnbot.TasksList;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":"import finnbot.Ui;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":"import java.io.File;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":" * Represents a command that marks a task as done in the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":"    private final int taskIndex;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"     * Constructs a MarkCommand with the specified task index.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"     * @param taskIndex The index of the task to be marked as done.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"    public MarkCommand(int taskIndex) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"     * Executes the command by marking a task as done in the task list,","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"     * displaying a confirmation message, and saving the updated list to storage.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"     * @param tasks The task list where the task will be marked as done.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"     * @param ui The user interface to handle output messages.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"     * @param storage The storage system to save task data.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"    @Override","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"samstt"},"content":"    public void execute(TasksList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"samstt"},"content":"        tasks.taskMarker(taskIndex, true);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"samstt"},"content":"        storage.saveFile(tasks, new File(Storage.FILEPATH));","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"samstt":36}},{"path":"src/main/java/finnbot/command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot.command;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"import finnbot.Storage;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"import finnbot.TasksList;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":"import finnbot.Ui;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":"import finnbot.tasks.ToDos;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":"import java.io.File;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":" * Represents a command that adds a to-do task to the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"    private final String description;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"     * Constructs a ToDoCommand with the specified task description.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"     * @param description The description of the to-do task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"    public ToDoCommand(String description) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"     * Executes the command by adding a to-do task to the task list,","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"     * displaying a confirmation message, and saving the updated list to storage.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"     * @param tasks The task list where the to-do task will be added.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"     * @param ui The user interface to handle output messages.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"     * @param storage The storage system to save task data.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"samstt"},"content":"    @Override","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"samstt"},"content":"    public void execute(TasksList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"samstt"},"content":"        ToDos todoTask \u003d new ToDos(description);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"samstt"},"content":"        tasks.addTask(todoTask);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"samstt"},"content":"        ui.showMessage(\"Added todo task: \");","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"samstt"},"content":"        ui.showMessage(String.valueOf(todoTask));","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"samstt"},"content":"        storage.saveFile(tasks, new File(Storage.FILEPATH));","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"samstt":39}},{"path":"src/main/java/finnbot/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot.command;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"import finnbot.Storage;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"import finnbot.TasksList;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":"import finnbot.Ui;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":"import java.io.File;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":" * Represents a command that marks a task as undone in the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"    private final int taskIndex;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"     * Constructs a UnmarkCommand with the specified task index.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"     * @param taskIndex The index of the task to be marked as undone.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"    public UnmarkCommand(int taskIndex) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"     * Executes the command by marking a task as undone in the task list,","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"     * displaying a confirmation message, and saving the updated list to storage.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"     * @param tasks The task list where the task will be marked as undone.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"     * @param ui The user interface to handle output messages.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"     * @param storage The storage system to save task data.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"samstt"},"content":"    @Override","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"samstt"},"content":"    public void execute(TasksList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"samstt"},"content":"        tasks.taskMarker(taskIndex, false);","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"samstt"},"content":"        storage.saveFile(tasks, new File(Storage.FILEPATH));","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-03-13","isFullCredit":false}],"authorContributionMap":{"samstt":36}},{"path":"src/main/java/finnbot/exceptions/EmptyInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot.exceptions;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":" * Represents an exception that is thrown when the input provided is empty.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":" * This exception extends the {@link Exception} class and is used to indicate","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":" * that the input provided by the user or system is empty and cannot be processed.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":"public class EmptyInputException extends Exception {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":"     * Constructs a new {@code EmptyInputException} with the specified detail message.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"     * @param message The detail message explaining the cause of the exception.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"    public EmptyInputException(String message) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"        super(message);","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-03-05","isFullCredit":false}],"authorContributionMap":{"samstt":18}},{"path":"src/main/java/finnbot/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot.exceptions;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":" * Represents an exception that is thrown when an invalid command is encountered.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":" * This exception extends the {@link Exception} class and is used to indicate","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":" * that the command provided is not recognized or is not valid within the current context.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":"     * Constructs a new {@code InvalidCommandException} with the specified detail message.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"     * @param message The detail message explaining the cause of the exception.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"    public InvalidCommandException(String message) {","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"        super(message);","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-05","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-03-05","isFullCredit":false}],"authorContributionMap":{"samstt":18}},{"path":"src/main/java/finnbot/tasks/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot.tasks;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":" * Represents a deadline task in the Finnbot application.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":" * A deadline task is a task that has a description and a due date.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":" * It extends from the {@link Tasks} class, inheriting common task properties.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":"public class Deadlines extends Tasks {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":"    protected String by;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"     * Constructs a new Deadline task with a description and due date.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"     * @param by The due date for the deadline task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"    public Deadlines(String description, String by) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"        super(description);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"        this.by \u003d by;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"     * Returns the string representation of the deadline task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"     * The format includes the task type, task status, description, and due date.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"     * @return A string representing the deadline task, including its description and due date.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"    @Override","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"    public String toString() {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"        return \"[D]\" + super.toString() + \"(by:\" + by + \")\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"samstt"},"content":"     * Returns a string representation of the deadline task in a format suitable for saving to a file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"samstt"},"content":"     * The format is:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"samstt"},"content":"     * \"D | [task status] | [description] | [due date]\"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"samstt"},"content":"     * @return A string representation of the deadline task for file storage.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"samstt"},"content":"    @Override","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"samstt"},"content":"    public String toFileString() {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"samstt"},"content":"        return \"D | \" + (getIsDone() ? \"1\" : \"0\") + \" | \" + description + \" | \" + by;","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-02-12","isFullCredit":false}],"authorContributionMap":{"samstt":44}},{"path":"src/main/java/finnbot/tasks/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot.tasks;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":" * Represents an event task in the Finnbot application.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":" * An event task consists of a description, a start time, and an end time.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":"public class Events extends Tasks {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":"    protected String startTime;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":"    protected String endTime;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"     * Constructs a new event task with the specified description, start time, and end time.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"     * The task is initially marked as not done.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"     * @param description The description of the event.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"     * @param startTime The start time of the event.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"     * @param endTime The end time of the event.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"    public Events(String description, String startTime, String endTime) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"        super(description);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"     * Returns the string representation of the event, including its status icon, description,","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"     * start time, and end time.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"     * The format is:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"     * \"[E] [status icon] [description] (from: [start time], to: [end time])\"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"samstt"},"content":"     * @return A string representing the event\u0027s status, description, start time, and end time.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"samstt"},"content":"    @Override","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"samstt"},"content":"    public String toString() {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"samstt"},"content":"        return \"[E]\" + super.toString() +\"(from:\" + startTime + \", to:\" + endTime + \")\";","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"samstt"},"content":"     * Returns a string representation of the event in a format suitable for saving to a file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"samstt"},"content":"     * The format is:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"samstt"},"content":"     * \"E | [status] | [description] | [start time]to[end time]\"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"samstt"},"content":"     * @return A string representation of the event for file storage.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"samstt"},"content":"    @Override","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"samstt"},"content":"    public String toFileString() {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"samstt"},"content":"        return \"E | \" + (getIsDone() ? \"1\" : \"0\") + \" | \" + description + \" | \" + startTime + \"to\" + endTime;","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-02-12","isFullCredit":false}],"authorContributionMap":{"samstt":50}},{"path":"src/main/java/finnbot/tasks/Tasks.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot.tasks;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":" * Represents a generic task in the Finnbot application.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":" * The task contains a description and a status indicating whether it is completed or not.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":"public class Tasks {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":"    protected String description;","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":"    public boolean isDone;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"     * Constructs a new task with the specified description.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"     * The task is initially marked as not done.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"     * @param description The description of the task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"    public Tasks(String description) {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"     * Marks the task as done.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"     * This method sets the {@code isDone} flag to {@code true}.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"    public void setDone() {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"samstt"},"content":"     * Returns the status of the task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"samstt"},"content":"     * @return {@code true} if the task is marked as done, otherwise {@code false}.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"samstt"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"samstt"},"content":"        return this.isDone;","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"samstt"},"content":"     * Returns the status icon of the task, which is either \"[X]\" for completed or \"[ ]\" for not completed.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"samstt"},"content":"     * @return The status icon of the task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"samstt"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"samstt"},"content":"        return (isDone ? \"[X]\" : \"[ ]\");","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"samstt"},"content":"     * Returns the string representation of the task, including its status icon and description.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"samstt"},"content":"     * The format is:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"samstt"},"content":"     * \"[status icon] [description]\"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"samstt"},"content":"     * @return A string representing the task\u0027s status and description.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"samstt"},"content":"    public String toString() {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"samstt"},"content":"        return getStatusIcon() + \" \" + description;","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"samstt"},"content":"     * Returns a string representation of the task in a format suitable for saving to a file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"samstt"},"content":"     * This method should be overridden by subclasses to provide task-specific file storage formats.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"samstt"},"content":"     * @return A string representation of the task for file storage.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"samstt"},"content":"    public String toFileString() {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"samstt"},"content":"        return \"\";","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"samstt"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"samstt"},"content":"        return description;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-06","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false}],"authorContributionMap":{"samstt":78}},{"path":"src/main/java/finnbot/tasks/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samstt"},"content":"package finnbot.tasks;","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"samstt"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"samstt"},"content":" * Represents a To-Do task in the Finnbot application.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"samstt"},"content":" * A To-Do task consists of a description and its completion status.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"samstt"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"samstt"},"content":"public class ToDos extends Tasks {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-13","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"samstt"},"content":"     * Constructs a new To-Do task with the specified description.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"samstt"},"content":"     * The task is initially marked as not done.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"samstt"},"content":"     * @param description The description of the To-Do task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"samstt"},"content":"    public ToDos(String description) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"samstt"},"content":"        super(description);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"samstt"},"content":"     * Returns the string representation of the To-Do task, including its status icon and description.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"samstt"},"content":"     * The format is:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"samstt"},"content":"     * \"[T] [status icon]  [description]\"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"samstt"},"content":"     * @return A string representing the status and description of the To-Do task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"samstt"},"content":"    @Override","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"samstt"},"content":"    public String toString() {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"samstt"},"content":"        return \"[T]\" + getStatusIcon() + \" \" + description.trim();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"samstt"},"content":"","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"samstt"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"samstt"},"content":"     * Returns a string representation of the To-Do task in a format suitable for saving to a file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"samstt"},"content":"     * The format is:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"samstt"},"content":"     * \"T | [status] | [description]\"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"samstt"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"samstt"},"content":"     * @return A string representation of the To-Do task for file storage.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"samstt"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"samstt"},"content":"    @Override","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"samstt"},"content":"    public String toFileString() {","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"samstt"},"content":"        return \"T | \" + (getIsDone() ? \"1\" : \"0\") + \" |  \" + description;","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"samstt"},"content":"    }","lastModifiedDate":"2025-03-12","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"samstt"},"content":"}","lastModifiedDate":"2025-02-12","isFullCredit":false}],"authorContributionMap":{"samstt":42}}]
