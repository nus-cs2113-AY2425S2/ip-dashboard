[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"pjahn31"},"content":"# Emily Task Manager","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"pjahn31"},"content":"Emily Task Manager is a CLI-based desktop application for taking note of and managing tasks for users in a simple way!","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"pjahn31"},"content":"## Features of Emily","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"pjahn31"},"content":"### Adding Tasks: `todo` / `deadline` / `event`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"pjahn31"},"content":"Adds a task to the task manager. Tasks can be one of the three types: Todo, Deadline or Event. \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"pjahn31"},"content":"Upon adding the task, the number of tasks in the current list will also be shown. \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"pjahn31"},"content":"The type of task is indicated by a \u0027T\u0027 for todo, a \u0027D\u0027 for deadline and an \u0027E\u0027 for event. \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"pjahn31"},"content":"- Add Todo: eg. `todo homework`, output `[T][ ] homework` \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"pjahn31"},"content":"- Add Deadline: eg. `deadline assignment by thursday`, output `[D][ ] assignment (by: thursday)` \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"pjahn31"},"content":"- Add Event: eg. `event birthday party from 4pm to 7pm`, output `[E][ ] birthday party (from: 4pm to: 6pm)`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"pjahn31"},"content":"### Listing all tasks: `list`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"pjahn31"},"content":"Displays all the tasks in the task list. This list is managed by Emily. \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"pjahn31"},"content":"This list displayed has all the information - the type of task, whether it is marked or unmarked, description of the task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"pjahn31"},"content":"### Mark/Unmark Tasks: `mark INDEX` / `unmark INDEX`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"pjahn31"},"content":"Marks or unmarks a task at the specified INDEX from the task list. \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"pjahn31"},"content":"Mark is indicated by a \u0027X\u0027 next to the task. Unmark is indicated by an empty space. \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"pjahn31"},"content":"- Mark task at index 1: eg. `mark 1`, output `[T][X] homework` \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"pjahn31"},"content":"- Unmark task at index 1: eg. `unmark 1`, output `[T][ ] homework`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"pjahn31"},"content":"### Finding Tasks: `find KEYWORD`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"pjahn31"},"content":"Finds tasks in the task list with the corresponding KEYWORD in the task description. \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"pjahn31"},"content":"Tasks with the KEYWORD is displayed as a list. \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"pjahn31"},"content":"- Find tasks with keyword birthday: eg. `find birthday`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"pjahn31"},"content":"### Deleting Tasks: `delete INDEX`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"pjahn31"},"content":"Delete a task at the specified INDEX from the task list. \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"pjahn31"},"content":"- Delete task at index 1: eg. `delete 1`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"pjahn31"},"content":"### Exiting the app: `bye`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"pjahn31"},"content":"Exits Emily Task Manager.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"pjahn31"},"content":"### Saving the data","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"pjahn31"},"content":"Emily saves data in the hard disk automatically after any command that changes the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"pjahn31"},"content":"There is no need to save manually.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"pjahn31"},"content":"### Editing the data file","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"pjahn31"},"content":"Emily automatically saves your task list data in a text file located at \"./Emily-storage.txt\".","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"pjahn31"},"content":"Advanced users are welcome to update data directly by editing the text file.","lastModifiedDate":"2025-03-14","isFullCredit":false}],"authorContributionMap":{"pjahn31":45}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"pjahn31"},"content":"# Emily Task Manager","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"pjahn31"},"content":"Emily Task Manager is a CLI-based desktop application for taking note of and managing tasks for users in a simple way!","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"pjahn31"},"content":"## Features of Emily","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"pjahn31"},"content":"### Adding Tasks: `todo` / `deadline` / `event`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"pjahn31"},"content":"Adds a task to the task manager. Tasks can be one of the three types: Todo, Deadline or Event. \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"pjahn31"},"content":"Upon adding the task, the number of tasks in the current list will also be shown. \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"pjahn31"},"content":"The type of task is indicated by a \u0027T\u0027 for todo, a \u0027D\u0027 for deadline and an \u0027E\u0027 for event. \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"pjahn31"},"content":"- Add Todo: eg. `todo homework`, output `[T][ ] homework` \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"pjahn31"},"content":"- Add Deadline: eg. `deadline assignment by thursday`, output `[D][ ] assignment (by: thursday)` \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"pjahn31"},"content":"- Add Event: eg. `event birthday party from 4pm to 7pm`, output `[E][ ] birthday party (from: 4pm to: 6pm)`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"pjahn31"},"content":"### Listing all tasks: `list`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"pjahn31"},"content":"Displays all the tasks in the task list. This list is managed by Emily. \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"pjahn31"},"content":"This list displayed has all the information - the type of task, whether it is marked or unmarked, description of the task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"pjahn31"},"content":"### Mark/Unmark Tasks: `mark INDEX` / `unmark INDEX`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"pjahn31"},"content":"Marks or unmarks a task at the specified INDEX from the task list. \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"pjahn31"},"content":"Mark is indicated by a \u0027X\u0027 next to the task. Unmark is indicated by an empty space. \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"pjahn31"},"content":"- Mark task at index 1: eg. `mark 1`, output `[T][X] homework` \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"pjahn31"},"content":"- Unmark task at index 1: eg. `unmark 1`, output `[T][ ] homework`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"pjahn31"},"content":"### Finding Tasks: `find KEYWORD`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"pjahn31"},"content":"Finds tasks in the task list with the corresponding KEYWORD in the task description. \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"pjahn31"},"content":"Tasks with the KEYWORD is displayed as a list. \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"pjahn31"},"content":"- Find tasks with keyword birthday: eg. `find birthday`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"pjahn31"},"content":"### Deleting Tasks: `delete INDEX`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"pjahn31"},"content":"Delete a task at the specified INDEX from the task list. \u003cbr/\u003e","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"pjahn31"},"content":"- Delete task at index 1: eg. `delete 1`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"pjahn31"},"content":"### Exiting the app: `bye`","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"pjahn31"},"content":"Exits Emily Task Manager.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"pjahn31"},"content":"### Saving the data","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"pjahn31"},"content":"Emily saves data in the hard disk automatically after any command that changes the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"pjahn31"},"content":"There is no need to save manually.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"pjahn31"},"content":"### Editing the data file","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"pjahn31"},"content":"Emily automatically saves your task list data in a text file located at \"./Emily-storage.txt\".","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"pjahn31"},"content":"Advanced users are welcome to update data directly by editing the text file.","lastModifiedDate":"2025-03-14","isFullCredit":false}],"authorContributionMap":{"pjahn31":33,"-":12}},{"path":"src/main/java/emily/Emily.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjahn31"},"content":"package emily;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"pjahn31"},"content":"import emily.exception.EmilyException;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"pjahn31"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"pjahn31"},"content":" * The main class for the Emily task management application","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"pjahn31"},"content":" * It initialises the task list, loads stored tasks and handles user input","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"pjahn31"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"pjahn31"},"content":"public class Emily {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"pjahn31"},"content":"    private final static TaskList tasks \u003d new TaskList();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"pjahn31"},"content":"     * The entry point of the application","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"pjahn31"},"content":"     * Initialises Ui and Storage, loads task and enters the main loop to process user commands","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"pjahn31"},"content":"     * @param args Command line arguments (not used)","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"pjahn31"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"pjahn31"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"pjahn31"},"content":"        Storage storage \u003d new Storage();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"pjahn31"},"content":"        tasks.addAll(Storage.loadTasksFromStorage());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"pjahn31"},"content":"        ui.printTasksLoadedMessage(tasks.getSize());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"pjahn31"},"content":"        ui.printGreeting();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"pjahn31"},"content":"        boolean isLooping \u003d true;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"pjahn31"},"content":"        while (isLooping) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"pjahn31"},"content":"            try {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"pjahn31"},"content":"                String input \u003d ui.readCommand();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"pjahn31"},"content":"                isLooping \u003d Parser.handleInput(tasks, input);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"pjahn31"},"content":"            } catch (EmilyException e) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"pjahn31"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"pjahn31"},"content":"            }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"pjahn31"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"pjahn31"},"content":"}","lastModifiedDate":"2025-03-14","isFullCredit":false}],"authorContributionMap":{"pjahn31":37}},{"path":"src/main/java/emily/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjahn31"},"content":"package emily;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"pjahn31"},"content":"import emily.command.PrintCommand;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"pjahn31"},"content":"import emily.command.AddTaskCommand;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"pjahn31"},"content":"import emily.command.MarkCommand;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"pjahn31"},"content":"import emily.command.DeleteCommand;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"pjahn31"},"content":"import emily.command.FindCommand;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"pjahn31"},"content":"import emily.exception.EmilyException;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"pjahn31"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"pjahn31"},"content":" * Processes user input and executes the appropriate command","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"pjahn31"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"pjahn31"},"content":"public class Parser {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"pjahn31"},"content":"     * Parse and handles the user input by executing the corresponding command","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"pjahn31"},"content":"     * @param tasks The TaskList containing all tasks","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"pjahn31"},"content":"     * @param input The user input string","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"pjahn31"},"content":"     * @return Returns true for the program to continue running, Returns false for the program to terminate.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"pjahn31"},"content":"     * @throws EmilyException If the input command is invalid","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"pjahn31"},"content":"    public static boolean handleInput(TaskList tasks, String input) throws EmilyException {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"pjahn31"},"content":"        try {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"pjahn31"},"content":"            String[] parts \u003d input.split(\" \", 2);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"pjahn31"},"content":"            String command \u003d parts[0].toLowerCase();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"pjahn31"},"content":"            switch (command) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"pjahn31"},"content":"            case \"bye\":","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"pjahn31"},"content":"                return Ui.printGoodbye();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"pjahn31"},"content":"            case \"list\":","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"pjahn31"},"content":"                new PrintCommand().setCommand(tasks, input);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"pjahn31"},"content":"                return true;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"pjahn31"},"content":"            case \"mark\":","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"pjahn31"},"content":"            case \"unmark\":","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"pjahn31"},"content":"                new MarkCommand().setCommand(tasks, input);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"pjahn31"},"content":"                return true;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"pjahn31"},"content":"            case \"todo\":","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"pjahn31"},"content":"            case \"deadline\":","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"pjahn31"},"content":"            case \"event\":","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"pjahn31"},"content":"                new AddTaskCommand().setCommand(tasks, input);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"pjahn31"},"content":"                return true;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"pjahn31"},"content":"            case \"delete\":","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"pjahn31"},"content":"                new DeleteCommand().setCommand(tasks, input);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"pjahn31"},"content":"                return true;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"pjahn31"},"content":"            case \"find\":","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"pjahn31"},"content":"                new FindCommand().setCommand(tasks, input);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"pjahn31"},"content":"                return true;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"pjahn31"},"content":"            default:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"pjahn31"},"content":"                throw new EmilyException(\"Sorry, I am not sure what that means. Try again!\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"pjahn31"},"content":"            }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"pjahn31"},"content":"        } catch (EmilyException e) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"pjahn31"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"pjahn31"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"pjahn31"},"content":"        return true;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"pjahn31"},"content":"}","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false}],"authorContributionMap":{"pjahn31":58}},{"path":"src/main/java/emily/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjahn31"},"content":"package emily;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"pjahn31"},"content":"import emily.task.Task;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"pjahn31"},"content":"import emily.task.Todo;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"pjahn31"},"content":"import emily.task.Deadline;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"pjahn31"},"content":"import emily.task.Event;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"pjahn31"},"content":"import java.io.File;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"pjahn31"},"content":"import java.io.IOException;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"pjahn31"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"pjahn31"},"content":"import java.io.FileWriter;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"pjahn31"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"pjahn31"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"pjahn31"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"pjahn31"},"content":" * Handles reading from and writing to the storage file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"pjahn31"},"content":" * This class is responsible for loading tasks from the file when the program starts","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"pjahn31"},"content":" * and saving tasks to the file when the program ends or tasks are modified.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"pjahn31"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"pjahn31"},"content":"public class Storage {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"pjahn31"},"content":"    private static final String FILE_PATH \u003d \"./Emily-storage.txt\";","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"pjahn31"},"content":"    private static File storageFile;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"pjahn31"},"content":"     * Constructs a Storage object and initializes the storage file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"pjahn31"},"content":"     * If the file does not exist, it creates a new file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"pjahn31"},"content":"    public Storage() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"pjahn31"},"content":"        storageFile \u003d new File(FILE_PATH);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"pjahn31"},"content":"        if (!storageFile.exists()) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"pjahn31"},"content":"            try {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"pjahn31"},"content":"                storageFile.createNewFile();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"pjahn31"},"content":"            } catch (IOException e) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"pjahn31"},"content":"                System.out.println(\"Error creating storage file: \" + e.getMessage());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"pjahn31"},"content":"            }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"pjahn31"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"pjahn31"},"content":"     * Checks if the storage file exists.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"pjahn31"},"content":"     * @return True if the file exists, false otherwise.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"pjahn31"},"content":"    public static boolean isFileExists() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"pjahn31"},"content":"        return storageFile.exists();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"pjahn31"},"content":"     * Returns the absolute path of the storage file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"pjahn31"},"content":"     * @return The absolute path of the file as a String.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"pjahn31"},"content":"    public String getAbsolutePath() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"pjahn31"},"content":"        return storageFile.getAbsolutePath();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"pjahn31"},"content":"     * Writes all tasks from the TaskList to the storage file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"pjahn31"},"content":"     * @param tasks The TaskList containing the tasks to be written to the file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"pjahn31"},"content":"    public static void writeToFile(TaskList tasks) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"pjahn31"},"content":"        try (FileWriter fw \u003d new FileWriter(FILE_PATH)) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"pjahn31"},"content":"            for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"pjahn31"},"content":"                fw.write(tasks.getTasks(i).toString() + System.lineSeparator());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"pjahn31"},"content":"            }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"pjahn31"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"pjahn31"},"content":"            System.out.println(\"Error writing to file: \" + e.getMessage());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"pjahn31"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"pjahn31"},"content":"     * Appends a single line of data to the storage file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"pjahn31"},"content":"     * @param data The data to be appended to the file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"pjahn31"},"content":"    public static void appendToFile(String data) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"pjahn31"},"content":"        try (FileWriter fw \u003d new FileWriter(FILE_PATH, true)) { // true enables appending","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"pjahn31"},"content":"            fw.write(data + System.lineSeparator());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"pjahn31"},"content":"        } catch (IOException e) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"pjahn31"},"content":"            System.out.println(\"Error appending to file: \" + e.getMessage());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"pjahn31"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"pjahn31"},"content":"     * Reads all lines from the storage file and returns them as an array of strings.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"pjahn31"},"content":"     * @return An array of strings, where each string represents a line from the file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"pjahn31"},"content":"    public static String[] readFromFile() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"pjahn31"},"content":"        ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"pjahn31"},"content":"        try (Scanner sc \u003d new Scanner(storageFile)) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"pjahn31"},"content":"            while (sc.hasNextLine()) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"pjahn31"},"content":"                String line \u003d sc.nextLine().trim();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"pjahn31"},"content":"                if (!line.isEmpty()) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"pjahn31"},"content":"                    output.add(line);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"pjahn31"},"content":"                }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"pjahn31"},"content":"            }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"pjahn31"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"pjahn31"},"content":"            System.out.println(\"File not found!\");","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"pjahn31"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"pjahn31"},"content":"        return output.toArray(new String[0]);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"pjahn31"},"content":"     * Parses a line from the storage file into a Task object.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"pjahn31"},"content":"     * @param line The line from the storage file to be parsed.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":110,"author":{"gitId":"pjahn31"},"content":"     * @return The Task object created from the line.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":111,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":112,"author":{"gitId":"pjahn31"},"content":"    public static Task parseTaskFromStorage(String line) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":113,"author":{"gitId":"pjahn31"},"content":"        char taskType \u003d line.charAt(1);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":114,"author":{"gitId":"pjahn31"},"content":"        boolean isDone \u003d (line.charAt(4) \u003d\u003d \u0027X\u0027);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":115,"author":{"gitId":"pjahn31"},"content":"        String content \u003d line.substring(7);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":116,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":117,"author":{"gitId":"pjahn31"},"content":"        Task task;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":118,"author":{"gitId":"pjahn31"},"content":"        switch (taskType) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":119,"author":{"gitId":"pjahn31"},"content":"        case \u0027T\u0027:","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":120,"author":{"gitId":"pjahn31"},"content":"            task \u003d new Todo(content);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":121,"author":{"gitId":"pjahn31"},"content":"            break;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":122,"author":{"gitId":"pjahn31"},"content":"        case \u0027D\u0027:","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":123,"author":{"gitId":"pjahn31"},"content":"            int byIndex \u003d content.lastIndexOf(\"(by: \");","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":124,"author":{"gitId":"pjahn31"},"content":"            if (byIndex !\u003d -1) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":125,"author":{"gitId":"pjahn31"},"content":"                String description \u003d content.substring(0, byIndex).trim();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":126,"author":{"gitId":"pjahn31"},"content":"                String by \u003d content.substring(byIndex + 5, content.length() - 1).trim();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":127,"author":{"gitId":"pjahn31"},"content":"                task \u003d new Deadline(description, by);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":128,"author":{"gitId":"pjahn31"},"content":"            } else {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":129,"author":{"gitId":"pjahn31"},"content":"                return new Task(content);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":130,"author":{"gitId":"pjahn31"},"content":"            }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":131,"author":{"gitId":"pjahn31"},"content":"            break;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":132,"author":{"gitId":"pjahn31"},"content":"        case \u0027E\u0027:","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":133,"author":{"gitId":"pjahn31"},"content":"            int fromIndex \u003d content.lastIndexOf(\"(from: \");","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":134,"author":{"gitId":"pjahn31"},"content":"            int toIndex \u003d content.lastIndexOf(\" to: \");","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":135,"author":{"gitId":"pjahn31"},"content":"            if (fromIndex !\u003d -1 \u0026\u0026 toIndex !\u003d -1) {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":136,"author":{"gitId":"pjahn31"},"content":"                String description \u003d content.substring(0, fromIndex).trim();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":137,"author":{"gitId":"pjahn31"},"content":"                String from \u003d content.substring(fromIndex + 7, toIndex).trim();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":138,"author":{"gitId":"pjahn31"},"content":"                String to \u003d content.substring(toIndex + 4, content.length() - 1).trim();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":139,"author":{"gitId":"pjahn31"},"content":"                task \u003d new Event(description, from, to);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":140,"author":{"gitId":"pjahn31"},"content":"            } else {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":141,"author":{"gitId":"pjahn31"},"content":"                return new Task(content);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":142,"author":{"gitId":"pjahn31"},"content":"            }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":143,"author":{"gitId":"pjahn31"},"content":"            break;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":144,"author":{"gitId":"pjahn31"},"content":"        default:","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":145,"author":{"gitId":"pjahn31"},"content":"            return new Task(content);","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":146,"author":{"gitId":"pjahn31"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":147,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":148,"author":{"gitId":"pjahn31"},"content":"        if (isDone) task.markAsDone();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":149,"author":{"gitId":"pjahn31"},"content":"        return task;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":150,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":151,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":152,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":153,"author":{"gitId":"pjahn31"},"content":"     * Loads all tasks from the storage file into an ArrayList.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":154,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":155,"author":{"gitId":"pjahn31"},"content":"     * @return An ArrayList containing all tasks loaded from the file.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":156,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":157,"author":{"gitId":"pjahn31"},"content":"    public static ArrayList\u003cTask\u003e loadTasksFromStorage() {","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":158,"author":{"gitId":"pjahn31"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":159,"author":{"gitId":"pjahn31"},"content":"        for (String line : readFromFile()) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":160,"author":{"gitId":"pjahn31"},"content":"            tasks.add(parseTaskFromStorage(line));","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":161,"author":{"gitId":"pjahn31"},"content":"        }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":162,"author":{"gitId":"pjahn31"},"content":"        return tasks;","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":163,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-06","isFullCredit":false},{"lineNumber":164,"author":{"gitId":"pjahn31"},"content":"}","lastModifiedDate":"2025-03-06","isFullCredit":false}],"authorContributionMap":{"pjahn31":164}},{"path":"src/main/java/emily/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjahn31"},"content":"package emily;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"pjahn31"},"content":"import emily.task.Task;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"pjahn31"},"content":"import java.util.ArrayList;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"pjahn31"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"pjahn31"},"content":" * Represents a list of tasks and provides methods to manipulate the list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"pjahn31"},"content":" * This class supports adding, deleting, marking, and searching for tasks.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"pjahn31"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"pjahn31"},"content":"public class TaskList {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"pjahn31"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"pjahn31"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"pjahn31"},"content":"    public TaskList() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"pjahn31"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"pjahn31"},"content":"     * Returns the task at the specified index.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"pjahn31"},"content":"     * @param index The index of the task to retrieve.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"pjahn31"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"pjahn31"},"content":"    public Task getTasks(int index) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"pjahn31"},"content":"        return tasks.get(index);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"pjahn31"},"content":"     * Returns the number of tasks in the list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"pjahn31"},"content":"     * @return The number of tasks as an integer.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"pjahn31"},"content":"    public int getSize() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"pjahn31"},"content":"        return tasks.size();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"pjahn31"},"content":"     * Adds a task to the list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"pjahn31"},"content":"     * @param task The task to be added.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"pjahn31"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"pjahn31"},"content":"        tasks.add(task);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"pjahn31"},"content":"     * Deletes the task at the specified index.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"pjahn31"},"content":"     * @param index The index of the task to delete.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"pjahn31"},"content":"    public void deleteTask(int index) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"pjahn31"},"content":"        tasks.remove(index - 1);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"pjahn31"},"content":"     * Marks the task at the specified index as done.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"pjahn31"},"content":"     * @param index The index of the task to mark as done.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"pjahn31"},"content":"    public void markTask(int index) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"pjahn31"},"content":"        tasks.get(index - 1).markAsDone();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"pjahn31"},"content":"     * Marks the task at the specified index as not done.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"pjahn31"},"content":"     * @param index The index of the task to unmark.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"pjahn31"},"content":"    public void unmarkTask(int index) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"pjahn31"},"content":"        tasks.get(index - 1).unmarkAsDone();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"pjahn31"},"content":"     * Checks if the task list is empty.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"pjahn31"},"content":"     * @return True if the list is empty, false otherwise.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"pjahn31"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"pjahn31"},"content":"        return tasks.isEmpty();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":83,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":84,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":85,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":86,"author":{"gitId":"pjahn31"},"content":"     * Adds all tasks from a given list to this task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":87,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":88,"author":{"gitId":"pjahn31"},"content":"     * @param tasks The list of tasks to be added.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":89,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":90,"author":{"gitId":"pjahn31"},"content":"    public void addAll(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":91,"author":{"gitId":"pjahn31"},"content":"        this.tasks.addAll(tasks);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":92,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":93,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":94,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":95,"author":{"gitId":"pjahn31"},"content":"     * Finds tasks containing the specified keyword in their description.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":96,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":97,"author":{"gitId":"pjahn31"},"content":"     * @param keyword The keyword to search for.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":98,"author":{"gitId":"pjahn31"},"content":"     * @return A TaskList containing the matching tasks.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":99,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":100,"author":{"gitId":"pjahn31"},"content":"    public TaskList findTasksByKeyword(String keyword) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":101,"author":{"gitId":"pjahn31"},"content":"        TaskList matchingTasks \u003d new TaskList();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":102,"author":{"gitId":"pjahn31"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":103,"author":{"gitId":"pjahn31"},"content":"            if (task.getDescription().toLowerCase().contains(keyword.toLowerCase())) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":104,"author":{"gitId":"pjahn31"},"content":"                matchingTasks.addTask(task);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":105,"author":{"gitId":"pjahn31"},"content":"            }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":106,"author":{"gitId":"pjahn31"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":107,"author":{"gitId":"pjahn31"},"content":"        return matchingTasks;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":108,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":109,"author":{"gitId":"pjahn31"},"content":"}","lastModifiedDate":"2025-03-14","isFullCredit":false}],"authorContributionMap":{"pjahn31":109}},{"path":"src/main/java/emily/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjahn31"},"content":"package emily;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"pjahn31"},"content":"import java.util.Scanner;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"pjahn31"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"pjahn31"},"content":" * Handles all user interface interactions, including displaying messages and reading user input.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"pjahn31"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"pjahn31"},"content":"public class Ui {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"pjahn31"},"content":"    private final Scanner scanner;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"pjahn31"},"content":"     * Constructs a new Ui object and initializes the scanner to read user input.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"pjahn31"},"content":"    public Ui() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"pjahn31"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"pjahn31"},"content":"     * Prints a message if there are any tasks saved in storage from the previous program run.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"pjahn31"},"content":"     * @param taskCount Indicates how many tasks are saved in storage","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"pjahn31"},"content":"    public void printTasksLoadedMessage(int taskCount) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"pjahn31"},"content":"        if (taskCount \u003e 0) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"pjahn31"},"content":"            System.out.println(\"[Your list has been updated with \" + taskCount + \" tasks from your storage!]\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"pjahn31"},"content":"            System.out.println(\" \");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"pjahn31"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"pjahn31"},"content":"     * Prints out greeting message to the user when the program starts","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"pjahn31"},"content":"    public void printGreeting() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"pjahn31"},"content":"        System.out.println(\"Hello! I\u0027m Emily.\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"pjahn31"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"pjahn31"},"content":"     * Reads a command entered by the user.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"pjahn31"},"content":"     * @return The user\u0027s input as a String.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"pjahn31"},"content":"    public String readCommand() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"pjahn31"},"content":"        return scanner.nextLine().trim();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"pjahn31"},"content":"     * Checks the list in storage and prints it out accordingly.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"pjahn31"},"content":"     * @param tasks if empty, print a message that list is empty","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"pjahn31"},"content":"     *              if not empty, print the list of tasks","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"pjahn31"},"content":"    public void printTaskList(TaskList tasks) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"pjahn31"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"pjahn31"},"content":"            System.out.println(\"Your tasks list is empty!\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"pjahn31"},"content":"        } else {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"pjahn31"},"content":"            System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"pjahn31"},"content":"            for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"pjahn31"},"content":"                System.out.println((i + 1) + \". \" + tasks.getTasks(i));","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"pjahn31"},"content":"            }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"pjahn31"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"pjahn31"},"content":"     * Prints out a general message.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"pjahn31"},"content":"     * @param message The input that is to be printed","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"pjahn31"},"content":"    public void printMessage(String message) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"pjahn31"},"content":"        System.out.println(message);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"pjahn31"},"content":"     * Prints a goodbye message to the user when the program ends.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"pjahn31"},"content":"     * @return Always returns false to indicate the program should exit","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"pjahn31"},"content":"    public static boolean printGoodbye() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"pjahn31"},"content":"        System.out.println(\"Goodbye! Hope to see you again soon!\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"pjahn31"},"content":"        return false;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":82,"author":{"gitId":"pjahn31"},"content":"}","lastModifiedDate":"2025-03-14","isFullCredit":false}],"authorContributionMap":{"pjahn31":82}},{"path":"src/main/java/emily/command/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjahn31"},"content":"package emily.command;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"pjahn31"},"content":"import emily.TaskList;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"pjahn31"},"content":"import emily.exception.EmilyException;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"pjahn31"},"content":"import emily.task.Task;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"pjahn31"},"content":"import emily.task.Todo;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"pjahn31"},"content":"import emily.task.Deadline;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"pjahn31"},"content":"import emily.task.Event;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"pjahn31"},"content":"import emily.Storage;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"pjahn31"},"content":"import emily.Ui;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"pjahn31"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"pjahn31"},"content":" * Represents a command to add a new task to the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"pjahn31"},"content":" * This command handles the creation of three types of tasks: Todo, Deadline, and Event.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"pjahn31"},"content":" * It validates the input format and ensures the task is added to the task list and saved to storage.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"pjahn31"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"pjahn31"},"content":"public class AddTaskCommand extends Command {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"pjahn31"},"content":"    Ui ui\u003d new Ui();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"pjahn31"},"content":"     * Executes the command to add a new task to the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"pjahn31"},"content":"     * The type of task (Todo, Deadline, or Event) is determined by the input.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"pjahn31"},"content":"     * The task is added to the task list and saved to storage.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"pjahn31"},"content":"     * @param tasks The task list to which the new task will be added.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"pjahn31"},"content":"     * @param input The user input containing the task details.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"pjahn31"},"content":"     * @throws EmilyException If the input format is invalid or the task description is empty.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"pjahn31"},"content":"    @Override","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"pjahn31"},"content":"    public void setCommand(TaskList tasks, String input) throws EmilyException {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"pjahn31"},"content":"        String[] parts \u003d input.trim().split(\" \");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"pjahn31"},"content":"        Task newTask;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"pjahn31"},"content":"        switch (parts[0]) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"pjahn31"},"content":"        case \"todo\":","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"pjahn31"},"content":"            if (parts.length \u003c 2) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"pjahn31"},"content":"                throw new EmilyException(\"Error! Todo description cannot be empty! An example \u0027todo homework\u0027.\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"pjahn31"},"content":"            }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"pjahn31"},"content":"            newTask \u003d new Todo(input.substring(5));","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"pjahn31"},"content":"            break;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"pjahn31"},"content":"        case \"deadline\":","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"pjahn31"},"content":"            if (!input.contains(\" by \")) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"pjahn31"},"content":"                throw new EmilyException(\"Error! Invalid deadline format. Use: deadline \u003ctask\u003e by \u003ctime\u003e\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"pjahn31"},"content":"            }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"pjahn31"},"content":"            String[] deadline \u003d input.substring(9).split(\" by \", 2);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"pjahn31"},"content":"            if (deadline[0].isBlank() || deadline[1].isBlank()) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"pjahn31"},"content":"                throw new EmilyException(\"Error! Deadline description cannot be empty! An example \u0027deadline homework by Thursday\u0027.\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"pjahn31"},"content":"            }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"pjahn31"},"content":"            newTask \u003d new Deadline(deadline[0], deadline[1]);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"pjahn31"},"content":"            break;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"pjahn31"},"content":"        case \"event\":","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"pjahn31"},"content":"            if (!input.contains(\" from \") || !input.contains(\" to \")) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"pjahn31"},"content":"                throw new EmilyException(\"Error! Invalid event format. Use: event \u003ctask\u003e from \u003ctime\u003e to \u003ctime\u003e\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"pjahn31"},"content":"            }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"pjahn31"},"content":"            String[] event \u003d input.substring(6).split(\" from | to \", 3);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"pjahn31"},"content":"            if (event[0].isBlank() || event[1].isBlank() || event[2].isBlank()) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":64,"author":{"gitId":"pjahn31"},"content":"                throw new EmilyException(\"Error! Event description cannot be empty! An example \u0027event party from 4pm to 6pm\u0027.\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":65,"author":{"gitId":"pjahn31"},"content":"            }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":66,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":67,"author":{"gitId":"pjahn31"},"content":"            newTask \u003d new Event(event[0], event[1], event[2]);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":68,"author":{"gitId":"pjahn31"},"content":"            break;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":69,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":70,"author":{"gitId":"pjahn31"},"content":"        default:","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":71,"author":{"gitId":"pjahn31"},"content":"            throw new EmilyException(\"Sorry, need to type \u003ctodo\u003e, \u003cdeadline\u003e or \u003cevent\u003e to add a task. Try again!\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":72,"author":{"gitId":"pjahn31"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":73,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":74,"author":{"gitId":"pjahn31"},"content":"        tasks.addTask(newTask);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":75,"author":{"gitId":"pjahn31"},"content":"        Storage.appendToFile(newTask.toString());","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":76,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":77,"author":{"gitId":"pjahn31"},"content":"        ui.printMessage(\"Got it! I\u0027ve added this task.\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":78,"author":{"gitId":"pjahn31"},"content":"        ui.printMessage(\" \" + newTask);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":79,"author":{"gitId":"pjahn31"},"content":"        ui.printMessage(\"Now you have \" + tasks.getSize() + \" tasks in the list.\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":80,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":81,"author":{"gitId":"pjahn31"},"content":"}","lastModifiedDate":"2025-03-14","isFullCredit":false}],"authorContributionMap":{"pjahn31":81}},{"path":"src/main/java/emily/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjahn31"},"content":"package emily.command;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"pjahn31"},"content":"import emily.TaskList;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"pjahn31"},"content":"import emily.exception.EmilyException;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"pjahn31"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"pjahn31"},"content":" * Represents an abstract command that can be executed on a TaskList","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"pjahn31"},"content":" * This class serves as a base class for certain subclasses that need to implement the setCommand method","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"pjahn31"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"pjahn31"},"content":"public abstract class Command {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"pjahn31"},"content":"     * Executes the command using the provided task list and input string","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"pjahn31"},"content":"     * @param taskList The list of tasks to be modified or looked at","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"pjahn31"},"content":"     * @param input The user input string containing the commands","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"pjahn31"},"content":"     * @throws EmilyException If an error occurs while executing the command","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"pjahn31"},"content":"    public abstract void setCommand(TaskList taskList, String input) throws EmilyException;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"pjahn31"},"content":"}","lastModifiedDate":"2025-03-14","isFullCredit":false}],"authorContributionMap":{"pjahn31":20}},{"path":"src/main/java/emily/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjahn31"},"content":"package emily.command;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"pjahn31"},"content":"import emily.Storage;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"pjahn31"},"content":"import emily.TaskList;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"pjahn31"},"content":"import emily.exception.EmilyException;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"pjahn31"},"content":"import emily.Ui;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"pjahn31"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"pjahn31"},"content":" * Represents a command to delete a task from the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"pjahn31"},"content":" * This command validates the input format, ensures the task number is valid, and removes the specified task from the task list and storage.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"pjahn31"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"pjahn31"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"pjahn31"},"content":"     * Executes the command to delete a task from the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"pjahn31"},"content":"     * The task number is extracted from the input, validated, and used to remove the task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"pjahn31"},"content":"     * The updated task list is then saved to storage.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"pjahn31"},"content":"     * @param tasks The task list from which the task will be deleted.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"pjahn31"},"content":"     * @param input The user input containing the task number to delete.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"pjahn31"},"content":"     * @throws EmilyException If the input format is invalid, the task number is out of range or the task number is not a valid integer.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"pjahn31"},"content":"    @Override","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"pjahn31"},"content":"    public void setCommand(TaskList tasks, String input) throws EmilyException {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"pjahn31"},"content":"        String[] parts \u003d input.split(\" \");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"pjahn31"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"pjahn31"},"content":"        if (parts.length !\u003d 2) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"pjahn31"},"content":"            throw new EmilyException(\"Invalid delete command format. Use: delete \u003ctask number\u003e\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"pjahn31"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"pjahn31"},"content":"        try {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"pjahn31"},"content":"            int index \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"pjahn31"},"content":"            if (index \u003c 1 || index \u003e tasks.getSize()) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"pjahn31"},"content":"                throw new EmilyException(\"This task does not exist! Enter a valid task number.\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"pjahn31"},"content":"            }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"pjahn31"},"content":"            ui.printMessage(\"Noted! I\u0027ve deleted this task.\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"pjahn31"},"content":"            ui.printMessage(\" \" + tasks.getTasks(index - 1));","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"pjahn31"},"content":"            tasks.deleteTask(index);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"pjahn31"},"content":"            Storage.writeToFile(tasks);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"pjahn31"},"content":"            ui.printMessage(\"Now you have \" + tasks.getSize() + \" tasks in the list. To check your updated list, type \u003clist\u003e next.\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"pjahn31"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"pjahn31"},"content":"            throw new EmilyException(\"Invalid task number. Please enter a valid number.\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"pjahn31"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"pjahn31"},"content":"}","lastModifiedDate":"2025-03-14","isFullCredit":false}],"authorContributionMap":{"pjahn31":50}},{"path":"src/main/java/emily/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjahn31"},"content":"package emily.command;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"pjahn31"},"content":"import emily.TaskList;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"pjahn31"},"content":"import emily.Ui;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"pjahn31"},"content":"import emily.exception.EmilyException;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"pjahn31"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"pjahn31"},"content":" * Represents a command to find tasks in the task list that match a given keyword.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"pjahn31"},"content":" * This command validates the input format, ensures the keyword is provided, and searches for tasks containing the keyword.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"pjahn31"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"pjahn31"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"pjahn31"},"content":"     * Executes the command to find tasks matching a keyword.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"pjahn31"},"content":"     * The keyword is extracted from the input, validated, and used to search the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"pjahn31"},"content":"     * Matching tasks are displayed to the user.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"pjahn31"},"content":"     * @param tasks The task list to search for matching tasks.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"pjahn31"},"content":"     * @param input The user input containing the keyword to search for.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"pjahn31"},"content":"     * @throws EmilyException If the keyword is missing or the input format is invalid.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"pjahn31"},"content":"    @Override","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"pjahn31"},"content":"    public void setCommand(TaskList tasks, String input) throws EmilyException {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"pjahn31"},"content":"        String[] parts \u003d input.split(\" \", 2);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"pjahn31"},"content":"        if (parts.length \u003c 2 || parts[1].isBlank()) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"pjahn31"},"content":"            throw new EmilyException(\"Error! Please provide a keyword to search for! An example \u0027find homework\u0027.\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"pjahn31"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"pjahn31"},"content":"        String keyword \u003d parts[1].trim();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"pjahn31"},"content":"        TaskList matchingTasks \u003d tasks.findTasksByKeyword(keyword);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"pjahn31"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"pjahn31"},"content":"        if (matchingTasks.isEmpty()) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"pjahn31"},"content":"            ui.printMessage(\"No tasks found with the keyword \" + keyword);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"pjahn31"},"content":"        } else {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"pjahn31"},"content":"            ui.printMessage(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"pjahn31"},"content":"            for (int i \u003d 0; i \u003c matchingTasks.getSize(); i++) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"pjahn31"},"content":"                ui.printMessage((i + 1) + \".\" + matchingTasks.getTasks(i));","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"pjahn31"},"content":"            }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"pjahn31"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"pjahn31"},"content":"}","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false}],"authorContributionMap":{"pjahn31":43}},{"path":"src/main/java/emily/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjahn31"},"content":"package emily.command;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"pjahn31"},"content":"import emily.Storage;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"pjahn31"},"content":"import emily.TaskList;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"pjahn31"},"content":"import emily.exception.EmilyException;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"pjahn31"},"content":"import emily.Ui;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"pjahn31"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"pjahn31"},"content":" * Represents a command to mark or unmark a task as done in the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"pjahn31"},"content":" * This command validates the input format, ensures the task number is valid, and updates the task\u0027s status in the task list and storage.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"pjahn31"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"pjahn31"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"pjahn31"},"content":"     * Executes the command to mark or unmark a task as done.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"pjahn31"},"content":"     * The task number is extracted from the input, validated, and used to update the task\u0027s status.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"pjahn31"},"content":"     * The updated task list is then saved to storage.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"pjahn31"},"content":"     * @param tasks The task list containing the task to be marked or unmarked.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"pjahn31"},"content":"     * @param input The user input containing the command and task number.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"pjahn31"},"content":"     * @throws EmilyException If the task number is invalid, out of range, or the input format is incorrect.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"pjahn31"},"content":"    @Override","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"pjahn31"},"content":"    public void setCommand(TaskList tasks, String input) throws EmilyException {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"pjahn31"},"content":"        String[] parts \u003d input.trim().split(\" \");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"pjahn31"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"pjahn31"},"content":"        int index \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"pjahn31"},"content":"        if (index \u003c 1 || index \u003e tasks.getSize()) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"pjahn31"},"content":"            throw new EmilyException(\"This task does not exist! Enter a valid task number.\");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"pjahn31"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"pjahn31"},"content":"        if (parts[0].equals(\"mark\")) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"pjahn31"},"content":"            ui.printMessage(\"Nice! I\u0027ve marked this task as done: \");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"pjahn31"},"content":"            tasks.markTask(index);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"pjahn31"},"content":"        } else {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"pjahn31"},"content":"            ui.printMessage(\"Ok, I\u0027ve unmarked this task as not done yet: \");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"pjahn31"},"content":"            tasks.unmarkTask(index);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"pjahn31"},"content":"        }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"pjahn31"},"content":"        Storage.writeToFile(tasks);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"pjahn31"},"content":"        ui.printMessage(\" \" + tasks.getTasks(index - 1));","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"pjahn31"},"content":"}","lastModifiedDate":"2025-03-14","isFullCredit":false}],"authorContributionMap":{"pjahn31":44}},{"path":"src/main/java/emily/command/PrintCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjahn31"},"content":"package emily.command;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"pjahn31"},"content":"import emily.TaskList;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"pjahn31"},"content":"import emily.Ui;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"pjahn31"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"pjahn31"},"content":" * Represents a command to print all tasks in the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"pjahn31"},"content":" * This command displays the current tasks in the task list to the user.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"pjahn31"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"pjahn31"},"content":"public class PrintCommand extends Command {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"pjahn31"},"content":"     * Executes the command to print all tasks in the task list.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"pjahn31"},"content":"     * The task list is displayed to the user in a formatted manner.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"pjahn31"},"content":"     * @param tasks The task list to be printed.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"pjahn31"},"content":"     * @param input The user input (not used in this command).","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"pjahn31"},"content":"    @Override","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"pjahn31"},"content":"    public void setCommand(TaskList tasks, String input) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"pjahn31"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"pjahn31"},"content":"        ui.printTaskList(tasks);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"pjahn31"},"content":"}","lastModifiedDate":"2025-03-14","isFullCredit":false}],"authorContributionMap":{"pjahn31":24}},{"path":"src/main/java/emily/exception/EmilyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjahn31"},"content":"package emily.exception;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"pjahn31"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"pjahn31"},"content":" * Represents a custom exception for the Emily application.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"pjahn31"},"content":" * This exception is used to handle errors specific to the Emily task management system,","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"pjahn31"},"content":" * such as invalid user input, file I/O errors, or other application-specific issues.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"pjahn31"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"pjahn31"},"content":"public class EmilyException extends Exception {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"pjahn31"},"content":"     * Constructs a new EmilyException with the specified error message.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"pjahn31"},"content":"     * @param message The detail message that describes the reason for the exception.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"pjahn31"},"content":"    public EmilyException(String message) {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"pjahn31"},"content":"        super(message);","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"pjahn31"},"content":"}","lastModifiedDate":"2025-03-14","isFullCredit":false}],"authorContributionMap":{"pjahn31":18}},{"path":"src/main/java/emily/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjahn31"},"content":"package emily.task;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"pjahn31"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"pjahn31"},"content":" * Represents a Deadline task in the Emily application.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"pjahn31"},"content":" * A Deadline task has a description and a due date/time (`by`).","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"pjahn31"},"content":" * It inherits from the Task class and includes additional details for the deadline.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"pjahn31"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"pjahn31"},"content":"public class Deadline extends Task {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"pjahn31"},"content":"    protected String by;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"pjahn31"},"content":"     * Constructs a new Deadline task with the given description and due date/time.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"pjahn31"},"content":"     * @param description The description of the Deadline task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"pjahn31"},"content":"     * @param by The due date/time of the task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"pjahn31"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"pjahn31"},"content":"        super(description);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"pjahn31"},"content":"        this.by \u003d by;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"pjahn31"},"content":"     * Returns a string representation of the Deadline task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"pjahn31"},"content":"     * The representation includes a prefix \"[D]\" to indicate that it is a Deadline task,","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"pjahn31"},"content":"     * followed by the description, status, and the due date/time (e.g., \"[D][X] Submit report (by: 2023-10-31)\").","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"pjahn31"},"content":"     * @return A formatted string representation of the Deadline task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"pjahn31"},"content":"    @Override","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"pjahn31"},"content":"    public String toString() {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"pjahn31"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"pjahn31"},"content":"}","lastModifiedDate":"2025-02-12","isFullCredit":false}],"authorContributionMap":{"pjahn31":34}},{"path":"src/main/java/emily/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjahn31"},"content":"package emily.task;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"pjahn31"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"pjahn31"},"content":" * Represents an Event task in the Emily application.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"pjahn31"},"content":" * An Event task has a description, a start time (`from`), and an end time (`to`).","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"pjahn31"},"content":" * It inherits from the Task class and includes additional details for the event\u0027s time frame.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"pjahn31"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"pjahn31"},"content":"public class Event extends Task {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"pjahn31"},"content":"    protected String from;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"pjahn31"},"content":"    protected String to;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"pjahn31"},"content":"     * Constructs a new Event task with the given description, start time, and end time.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"pjahn31"},"content":"     * @param description The description of the Event task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"pjahn31"},"content":"     * @param from The start time of the event.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"pjahn31"},"content":"     * @param to The end time of the event.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"pjahn31"},"content":"    public Event(String description,String from, String to) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"pjahn31"},"content":"        super(description);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"pjahn31"},"content":"        this.from \u003d from;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"pjahn31"},"content":"        this.to \u003d to;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"pjahn31"},"content":"     * Returns a string representation of the Event task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"pjahn31"},"content":"     * The representation includes a prefix \"[E]\" to indicate that it is an Event task,","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"pjahn31"},"content":"     * followed by the description, status, and the event\u0027s time frame (e.g., \"[E][X] Team meeting (from: 2pm to: 4pm)\").","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"pjahn31"},"content":"     * @return A formatted string representation of the Event task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"pjahn31"},"content":"    @Override","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"pjahn31"},"content":"    public String toString() {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"pjahn31"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"pjahn31"},"content":"}","lastModifiedDate":"2025-02-12","isFullCredit":false}],"authorContributionMap":{"pjahn31":37}},{"path":"src/main/java/emily/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjahn31"},"content":"package emily.task;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"pjahn31"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"pjahn31"},"content":" * Represents a task with a description and a completion status.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"pjahn31"},"content":" * This class serves as the base class for specific task types like Todo, Deadline, and Event.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"pjahn31"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"pjahn31"},"content":"public class Task {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"pjahn31"},"content":"    protected String description;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"pjahn31"},"content":"    protected boolean isDone;","lastModifiedDate":"2025-02-07","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"pjahn31"},"content":"     * Constructs a new Task with the given description.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"pjahn31"},"content":"     * @param description The description of the task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"pjahn31"},"content":"    public Task(String description) {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"pjahn31"},"content":"        this.description \u003d description;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"pjahn31"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"pjahn31"},"content":"     * Returns the description of the task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"pjahn31"},"content":"     * @return The description of the task as a String","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"pjahn31"},"content":"    public String getDescription() {","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"pjahn31"},"content":"        return description;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":31,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":32,"author":{"gitId":"pjahn31"},"content":"     * Returns the status icon of the task, indicating whether it is done.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":33,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":34,"author":{"gitId":"pjahn31"},"content":"     * @return \"X\" if the task is done, \" \" (space) otherwise.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":35,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":36,"author":{"gitId":"pjahn31"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":37,"author":{"gitId":"pjahn31"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":38,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":39,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":40,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":41,"author":{"gitId":"pjahn31"},"content":"     * Marks the task as done by setting the isDone field to true.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":42,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":43,"author":{"gitId":"pjahn31"},"content":"    public void markAsDone() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":44,"author":{"gitId":"pjahn31"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":45,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":46,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":47,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":48,"author":{"gitId":"pjahn31"},"content":"     * Marks the task as not done by setting the isDone field to false.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":49,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":50,"author":{"gitId":"pjahn31"},"content":"    public void unmarkAsDone() {","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":51,"author":{"gitId":"pjahn31"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":52,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-02-02","isFullCredit":false},{"lineNumber":53,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":54,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":55,"author":{"gitId":"pjahn31"},"content":"     * Returns a string representation of the task, including its status and description.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":56,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":57,"author":{"gitId":"pjahn31"},"content":"     * @return The string representation of the task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":58,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":59,"author":{"gitId":"pjahn31"},"content":"    @Override","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":60,"author":{"gitId":"pjahn31"},"content":"    public String toString() {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":61,"author":{"gitId":"pjahn31"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":62,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":63,"author":{"gitId":"pjahn31"},"content":"}","lastModifiedDate":"2025-02-02","isFullCredit":false}],"authorContributionMap":{"pjahn31":63}},{"path":"src/main/java/emily/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pjahn31"},"content":"package emily.task;","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":2,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":3,"author":{"gitId":"pjahn31"},"content":"/**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":4,"author":{"gitId":"pjahn31"},"content":" * Represents a Todo task in the Emily application.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":5,"author":{"gitId":"pjahn31"},"content":" * A Todo task is a simple task with a description but no specific deadline or time frame.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":6,"author":{"gitId":"pjahn31"},"content":" * It inherits from the Task class and adds a specific format for its string representation.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":7,"author":{"gitId":"pjahn31"},"content":" */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":8,"author":{"gitId":"pjahn31"},"content":"public class Todo extends Task {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":9,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-03-01","isFullCredit":false},{"lineNumber":10,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":11,"author":{"gitId":"pjahn31"},"content":"     * Constructs a new Todo task with the given description.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":12,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":13,"author":{"gitId":"pjahn31"},"content":"     * @param description The description of the Todo task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":14,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":15,"author":{"gitId":"pjahn31"},"content":"    public Todo(String description) {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":16,"author":{"gitId":"pjahn31"},"content":"        super(description);","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":17,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":18,"author":{"gitId":"pjahn31"},"content":"","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":19,"author":{"gitId":"pjahn31"},"content":"    /**","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":20,"author":{"gitId":"pjahn31"},"content":"     * Returns a string representation of the Todo task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":21,"author":{"gitId":"pjahn31"},"content":"     * The representation includes a prefix \"[T]\" to indicate that it is a Todo task,","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":22,"author":{"gitId":"pjahn31"},"content":"     * followed by the description and status (e.g., \"[T][X] Read a book\").","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":23,"author":{"gitId":"pjahn31"},"content":"     *","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":24,"author":{"gitId":"pjahn31"},"content":"     * @return A formatted string representation of the Todo task.","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":25,"author":{"gitId":"pjahn31"},"content":"     */","lastModifiedDate":"2025-03-14","isFullCredit":false},{"lineNumber":26,"author":{"gitId":"pjahn31"},"content":"    @Override","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":27,"author":{"gitId":"pjahn31"},"content":"    public String toString() {","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":28,"author":{"gitId":"pjahn31"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":29,"author":{"gitId":"pjahn31"},"content":"    }","lastModifiedDate":"2025-02-12","isFullCredit":false},{"lineNumber":30,"author":{"gitId":"pjahn31"},"content":"}","lastModifiedDate":"2025-02-12","isFullCredit":false}],"authorContributionMap":{"pjahn31":30}}]
